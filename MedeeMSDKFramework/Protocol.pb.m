// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Protocol.pb.h"

@implementation ProtocolRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ProtocolRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL EVENT_TYPEIsValidValue(EVENT_TYPE value) {
  switch (value) {
    case EVENT_TYPELoadScr:
    case EVENT_TYPENewSession:
    case EVENT_TYPEEndSession:
    case EVENT_TYPEEngagementDisplayed:
    case EVENT_TYPEClaimedViaFb:
    case EVENT_TYPEClaimedViaEmail:
    case EVENT_TYPEClaimed:
    case EVENT_TYPEEngagementDismissed:
    case EVENT_TYPECustom:
      return YES;
    default:
      return NO;
  }
}
BOOL DeviceOSIsValidValue(DeviceOS value) {
  switch (value) {
    case DeviceOSIos:
    case DeviceOSAndroid:
    case DeviceOSWp:
    case DeviceOSBb10:
    case DeviceOSFfos:
      return YES;
    default:
      return NO;
  }
}
BOOL DeviceTypeIsValidValue(DeviceType value) {
  switch (value) {
    case DeviceTypePhone:
    case DeviceTypeTablet:
    case DeviceTypePhablet:
      return YES;
    default:
      return NO;
  }
}
BOOL AgeGroupIsValidValue(AgeGroup value) {
  switch (value) {
    case AgeGroup1824:
    case AgeGroup2530:
    case AgeGroup3140:
    case AgeGroup4150:
    case AgeGroup50Plus:
    case AgeGroupUnderage:
      return YES;
    default:
      return NO;
  }
}
@interface Response ()
@property Response_RespType respType;
@property (retain) Session* newSession;
@property (retain) Data* initDataResponse;
@property (retain) NSMutableArray* mutableCampaignsList;
@property (retain) NSString* rewardCode;
@property BOOL ack;
@property (retain) Error* error;
@end

@implementation Response

- (BOOL) hasRespType {
  return !!hasRespType_;
}
- (void) setHasRespType:(BOOL) value {
  hasRespType_ = !!value;
}
@synthesize respType;
- (BOOL) hasNewSession {
  return !!hasNewSession_;
}
- (void) setHasNewSession:(BOOL) value {
  hasNewSession_ = !!value;
}
@synthesize newSession;
- (BOOL) hasInitDataResponse {
  return !!hasInitDataResponse_;
}
- (void) setHasInitDataResponse:(BOOL) value {
  hasInitDataResponse_ = !!value;
}
@synthesize initDataResponse;
@synthesize mutableCampaignsList;
- (BOOL) hasRewardCode {
  return !!hasRewardCode_;
}
- (void) setHasRewardCode:(BOOL) value {
  hasRewardCode_ = !!value;
}
@synthesize rewardCode;
- (BOOL) hasAck {
  return !!hasAck_;
}
- (void) setHasAck:(BOOL) value {
  hasAck_ = !!value;
}
- (BOOL) ack {
  return !!ack_;
}
- (void) setAck:(BOOL) value {
  ack_ = !!value;
}
- (BOOL) hasError {
  return !!hasError_;
}
- (void) setHasError:(BOOL) value {
  hasError_ = !!value;
}
@synthesize error;
- (void) dealloc {
  self.newSession = nil;
  self.initDataResponse = nil;
  self.mutableCampaignsList = nil;
  self.rewardCode = nil;
  self.error = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.respType = Response_RespTypeInit;
    self.newSession = [Session defaultInstance];
    self.initDataResponse = [Data defaultInstance];
    self.rewardCode = @"";
    self.ack = NO;
    self.error = [Error defaultInstance];
  }
  return self;
}
static Response* defaultResponseInstance = nil;
+ (void) initialize {
  if (self == [Response class]) {
    defaultResponseInstance = [[Response alloc] init];
  }
}
+ (Response*) defaultInstance {
  return defaultResponseInstance;
}
- (Response*) defaultInstance {
  return defaultResponseInstance;
}
- (NSArray*) campaignsList {
  return mutableCampaignsList;
}
- (Campaign*) campaignsAtIndex:(int32_t) index {
  id value = [mutableCampaignsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasRespType) {
    return NO;
  }
  if (self.hasNewSession) {
    if (!self.newSession.isInitialized) {
      return NO;
    }
  }
  if (self.hasInitDataResponse) {
    if (!self.initDataResponse.isInitialized) {
      return NO;
    }
  }
  for (Campaign* element in self.campaignsList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  if (self.hasError) {
    if (!self.error.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasNewSession) {
    [output writeMessage:1 value:self.newSession];
  }
  if (self.hasInitDataResponse) {
    [output writeMessage:2 value:self.initDataResponse];
  }
  for (Campaign* element in self.campaignsList) {
    [output writeMessage:3 value:element];
  }
  if (self.hasRewardCode) {
    [output writeString:4 value:self.rewardCode];
  }
  if (self.hasAck) {
    [output writeBool:5 value:self.ack];
  }
  if (self.hasError) {
    [output writeMessage:6 value:self.error];
  }
  if (self.hasRespType) {
    [output writeEnum:7 value:self.respType];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasNewSession) {
    size += computeMessageSize(1, self.newSession);
  }
  if (self.hasInitDataResponse) {
    size += computeMessageSize(2, self.initDataResponse);
  }
  for (Campaign* element in self.campaignsList) {
    size += computeMessageSize(3, element);
  }
  if (self.hasRewardCode) {
    size += computeStringSize(4, self.rewardCode);
  }
  if (self.hasAck) {
    size += computeBoolSize(5, self.ack);
  }
  if (self.hasError) {
    size += computeMessageSize(6, self.error);
  }
  if (self.hasRespType) {
    size += computeEnumSize(7, self.respType);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Response*) parseFromData:(NSData*) data {
  return (Response*)[[[Response builder] mergeFromData:data] build];
}
+ (Response*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Response*)[[[Response builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Response*) parseFromInputStream:(NSInputStream*) input {
  return (Response*)[[[Response builder] mergeFromInputStream:input] build];
}
+ (Response*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Response*)[[[Response builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Response*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Response*)[[[Response builder] mergeFromCodedInputStream:input] build];
}
+ (Response*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Response*)[[[Response builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Response_Builder*) builder {
  return [[[Response_Builder alloc] init] autorelease];
}
+ (Response_Builder*) builderWithPrototype:(Response*) prototype {
  return [[Response builder] mergeFrom:prototype];
}
- (Response_Builder*) builder {
  return [Response builder];
}
@end

BOOL Response_RespTypeIsValidValue(Response_RespType value) {
  switch (value) {
    case Response_RespTypeInit:
    case Response_RespTypeNewSession:
    case Response_RespTypeClaimReward:
    case Response_RespTypeReInit:
    case Response_RespTypeSessionReport:
      return YES;
    default:
      return NO;
  }
}
@interface Response_Builder()
@property (retain) Response* result;
@end

@implementation Response_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Response alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Response_Builder*) clear {
  self.result = [[[Response alloc] init] autorelease];
  return self;
}
- (Response_Builder*) clone {
  return [Response builderWithPrototype:result];
}
- (Response*) defaultInstance {
  return [Response defaultInstance];
}
- (Response*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Response*) buildPartial {
  Response* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Response_Builder*) mergeFrom:(Response*) other {
  if (other == [Response defaultInstance]) {
    return self;
  }
  if (other.hasRespType) {
    [self setRespType:other.respType];
  }
  if (other.hasNewSession) {
    [self mergeNewSession:other.newSession];
  }
  if (other.hasInitDataResponse) {
    [self mergeInitDataResponse:other.initDataResponse];
  }
  if (other.mutableCampaignsList.count > 0) {
    if (result.mutableCampaignsList == nil) {
      result.mutableCampaignsList = [NSMutableArray array];
    }
    [result.mutableCampaignsList addObjectsFromArray:other.mutableCampaignsList];
  }
  if (other.hasRewardCode) {
    [self setRewardCode:other.rewardCode];
  }
  if (other.hasAck) {
    [self setAck:other.ack];
  }
  if (other.hasError) {
    [self mergeError:other.error];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Response_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Response_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        Session_Builder* subBuilder = [Session builder];
        if (self.hasNewSession) {
          [subBuilder mergeFrom:self.newSession];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setNewSession:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        Data_Builder* subBuilder = [Data builder];
        if (self.hasInitDataResponse) {
          [subBuilder mergeFrom:self.initDataResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setInitDataResponse:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        Campaign_Builder* subBuilder = [Campaign builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCampaigns:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        [self setRewardCode:[input readString]];
        break;
      }
      case 40: {
        [self setAck:[input readBool]];
        break;
      }
      case 50: {
        Error_Builder* subBuilder = [Error builder];
        if (self.hasError) {
          [subBuilder mergeFrom:self.error];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setError:[subBuilder buildPartial]];
        break;
      }
      case 56: {
        int32_t value = [input readEnum];
        if (Response_RespTypeIsValidValue(value)) {
          [self setRespType:value];
        } else {
          [unknownFields mergeVarintField:7 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasRespType {
  return result.hasRespType;
}
- (Response_RespType) respType {
  return result.respType;
}
- (Response_Builder*) setRespType:(Response_RespType) value {
  result.hasRespType = YES;
  result.respType = value;
  return self;
}
- (Response_Builder*) clearRespType {
  result.hasRespType = NO;
  result.respType = Response_RespTypeInit;
  return self;
}
- (BOOL) hasNewSession {
  return result.hasNewSession;
}
- (Session*) newSession {
  return result.newSession;
}
- (Response_Builder*) setNewSession:(Session*) value {
  result.hasNewSession = YES;
  result.newSession = value;
  return self;
}
- (Response_Builder*) setNewSessionBuilder:(Session_Builder*) builderForValue {
  return [self setNewSession:[builderForValue build]];
}
- (Response_Builder*) mergeNewSession:(Session*) value {
  if (result.hasNewSession &&
      result.newSession != [Session defaultInstance]) {
    result.newSession =
      [[[Session builderWithPrototype:result.newSession] mergeFrom:value] buildPartial];
  } else {
    result.newSession = value;
  }
  result.hasNewSession = YES;
  return self;
}
- (Response_Builder*) clearNewSession {
  result.hasNewSession = NO;
  result.newSession = [Session defaultInstance];
  return self;
}
- (BOOL) hasInitDataResponse {
  return result.hasInitDataResponse;
}
- (Data*) initDataResponse {
  return result.initDataResponse;
}
- (Response_Builder*) setInitDataResponse:(Data*) value {
  result.hasInitDataResponse = YES;
  result.initDataResponse = value;
  return self;
}
- (Response_Builder*) setInitDataResponseBuilder:(Data_Builder*) builderForValue {
  return [self setInitDataResponse:[builderForValue build]];
}
- (Response_Builder*) mergeInitDataResponse:(Data*) value {
  if (result.hasInitDataResponse &&
      result.initDataResponse != [Data defaultInstance]) {
    result.initDataResponse =
      [[[Data builderWithPrototype:result.initDataResponse] mergeFrom:value] buildPartial];
  } else {
    result.initDataResponse = value;
  }
  result.hasInitDataResponse = YES;
  return self;
}
- (Response_Builder*) clearInitDataResponse {
  result.hasInitDataResponse = NO;
  result.initDataResponse = [Data defaultInstance];
  return self;
}
- (NSArray*) campaignsList {
  if (result.mutableCampaignsList == nil) { return [NSArray array]; }
  return result.mutableCampaignsList;
}
- (Campaign*) campaignsAtIndex:(int32_t) index {
  return [result campaignsAtIndex:index];
}
- (Response_Builder*) replaceCampaignsAtIndex:(int32_t) index with:(Campaign*) value {
  [result.mutableCampaignsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (Response_Builder*) addAllCampaigns:(NSArray*) values {
  if (result.mutableCampaignsList == nil) {
    result.mutableCampaignsList = [NSMutableArray array];
  }
  [result.mutableCampaignsList addObjectsFromArray:values];
  return self;
}
- (Response_Builder*) clearCampaignsList {
  result.mutableCampaignsList = nil;
  return self;
}
- (Response_Builder*) addCampaigns:(Campaign*) value {
  if (result.mutableCampaignsList == nil) {
    result.mutableCampaignsList = [NSMutableArray array];
  }
  [result.mutableCampaignsList addObject:value];
  return self;
}
- (BOOL) hasRewardCode {
  return result.hasRewardCode;
}
- (NSString*) rewardCode {
  return result.rewardCode;
}
- (Response_Builder*) setRewardCode:(NSString*) value {
  result.hasRewardCode = YES;
  result.rewardCode = value;
  return self;
}
- (Response_Builder*) clearRewardCode {
  result.hasRewardCode = NO;
  result.rewardCode = @"";
  return self;
}
- (BOOL) hasAck {
  return result.hasAck;
}
- (BOOL) ack {
  return result.ack;
}
- (Response_Builder*) setAck:(BOOL) value {
  result.hasAck = YES;
  result.ack = value;
  return self;
}
- (Response_Builder*) clearAck {
  result.hasAck = NO;
  result.ack = NO;
  return self;
}
- (BOOL) hasError {
  return result.hasError;
}
- (Error*) error {
  return result.error;
}
- (Response_Builder*) setError:(Error*) value {
  result.hasError = YES;
  result.error = value;
  return self;
}
- (Response_Builder*) setErrorBuilder:(Error_Builder*) builderForValue {
  return [self setError:[builderForValue build]];
}
- (Response_Builder*) mergeError:(Error*) value {
  if (result.hasError &&
      result.error != [Error defaultInstance]) {
    result.error =
      [[[Error builderWithPrototype:result.error] mergeFrom:value] buildPartial];
  } else {
    result.error = value;
  }
  result.hasError = YES;
  return self;
}
- (Response_Builder*) clearError {
  result.hasError = NO;
  result.error = [Error defaultInstance];
  return self;
}
@end

@interface Request ()
@property Request_ReqType reqType;
@property (retain) NSString* sessionId;
@property int64_t timestamp;
@property (retain) Session* session;
@property (retain) Data* initData;
@property (retain) Claim* claim;
@property (retain) Geo* geo;
@end

@implementation Request

- (BOOL) hasReqType {
  return !!hasReqType_;
}
- (void) setHasReqType:(BOOL) value {
  hasReqType_ = !!value;
}
@synthesize reqType;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) value {
  hasSessionId_ = !!value;
}
@synthesize sessionId;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) value {
  hasTimestamp_ = !!value;
}
@synthesize timestamp;
- (BOOL) hasSession {
  return !!hasSession_;
}
- (void) setHasSession:(BOOL) value {
  hasSession_ = !!value;
}
@synthesize session;
- (BOOL) hasInitData {
  return !!hasInitData_;
}
- (void) setHasInitData:(BOOL) value {
  hasInitData_ = !!value;
}
@synthesize initData;
- (BOOL) hasClaim {
  return !!hasClaim_;
}
- (void) setHasClaim:(BOOL) value {
  hasClaim_ = !!value;
}
@synthesize claim;
- (BOOL) hasGeo {
  return !!hasGeo_;
}
- (void) setHasGeo:(BOOL) value {
  hasGeo_ = !!value;
}
@synthesize geo;
- (void) dealloc {
  self.sessionId = nil;
  self.session = nil;
  self.initData = nil;
  self.claim = nil;
  self.geo = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.reqType = Request_ReqTypeInit;
    self.sessionId = @"";
    self.timestamp = 0L;
    self.session = [Session defaultInstance];
    self.initData = [Data defaultInstance];
    self.claim = [Claim defaultInstance];
    self.geo = [Geo defaultInstance];
  }
  return self;
}
static Request* defaultRequestInstance = nil;
+ (void) initialize {
  if (self == [Request class]) {
    defaultRequestInstance = [[Request alloc] init];
  }
}
+ (Request*) defaultInstance {
  return defaultRequestInstance;
}
- (Request*) defaultInstance {
  return defaultRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasReqType) {
    return NO;
  }
  if (!self.hasTimestamp) {
    return NO;
  }
  if (self.hasSession) {
    if (!self.session.isInitialized) {
      return NO;
    }
  }
  if (self.hasInitData) {
    if (!self.initData.isInitialized) {
      return NO;
    }
  }
  if (self.hasClaim) {
    if (!self.claim.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasReqType) {
    [output writeEnum:1 value:self.reqType];
  }
  if (self.hasSessionId) {
    [output writeString:2 value:self.sessionId];
  }
  if (self.hasTimestamp) {
    [output writeInt64:3 value:self.timestamp];
  }
  if (self.hasSession) {
    [output writeMessage:4 value:self.session];
  }
  if (self.hasInitData) {
    [output writeMessage:5 value:self.initData];
  }
  if (self.hasClaim) {
    [output writeMessage:6 value:self.claim];
  }
  if (self.hasGeo) {
    [output writeMessage:7 value:self.geo];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasReqType) {
    size += computeEnumSize(1, self.reqType);
  }
  if (self.hasSessionId) {
    size += computeStringSize(2, self.sessionId);
  }
  if (self.hasTimestamp) {
    size += computeInt64Size(3, self.timestamp);
  }
  if (self.hasSession) {
    size += computeMessageSize(4, self.session);
  }
  if (self.hasInitData) {
    size += computeMessageSize(5, self.initData);
  }
  if (self.hasClaim) {
    size += computeMessageSize(6, self.claim);
  }
  if (self.hasGeo) {
    size += computeMessageSize(7, self.geo);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Request*) parseFromData:(NSData*) data {
  return (Request*)[[[Request builder] mergeFromData:data] build];
}
+ (Request*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Request*)[[[Request builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Request*) parseFromInputStream:(NSInputStream*) input {
  return (Request*)[[[Request builder] mergeFromInputStream:input] build];
}
+ (Request*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Request*)[[[Request builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Request*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Request*)[[[Request builder] mergeFromCodedInputStream:input] build];
}
+ (Request*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Request*)[[[Request builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Request_Builder*) builder {
  return [[[Request_Builder alloc] init] autorelease];
}
+ (Request_Builder*) builderWithPrototype:(Request*) prototype {
  return [[Request builder] mergeFrom:prototype];
}
- (Request_Builder*) builder {
  return [Request builder];
}
@end

BOOL Request_ReqTypeIsValidValue(Request_ReqType value) {
  switch (value) {
    case Request_ReqTypeInit:
    case Request_ReqTypeNewSession:
    case Request_ReqTypeClaimReward:
    case Request_ReqTypeReInit:
    case Request_ReqTypeSessionReport:
      return YES;
    default:
      return NO;
  }
}
@interface Request_Builder()
@property (retain) Request* result;
@end

@implementation Request_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Request alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Request_Builder*) clear {
  self.result = [[[Request alloc] init] autorelease];
  return self;
}
- (Request_Builder*) clone {
  return [Request builderWithPrototype:result];
}
- (Request*) defaultInstance {
  return [Request defaultInstance];
}
- (Request*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Request*) buildPartial {
  Request* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Request_Builder*) mergeFrom:(Request*) other {
  if (other == [Request defaultInstance]) {
    return self;
  }
  if (other.hasReqType) {
    [self setReqType:other.reqType];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  if (other.hasSession) {
    [self mergeSession:other.session];
  }
  if (other.hasInitData) {
    [self mergeInitData:other.initData];
  }
  if (other.hasClaim) {
    [self mergeClaim:other.claim];
  }
  if (other.hasGeo) {
    [self mergeGeo:other.geo];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Request_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Request_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (Request_ReqTypeIsValidValue(value)) {
          [self setReqType:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        [self setSessionId:[input readString]];
        break;
      }
      case 24: {
        [self setTimestamp:[input readInt64]];
        break;
      }
      case 34: {
        Session_Builder* subBuilder = [Session builder];
        if (self.hasSession) {
          [subBuilder mergeFrom:self.session];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSession:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        Data_Builder* subBuilder = [Data builder];
        if (self.hasInitData) {
          [subBuilder mergeFrom:self.initData];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setInitData:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        Claim_Builder* subBuilder = [Claim builder];
        if (self.hasClaim) {
          [subBuilder mergeFrom:self.claim];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setClaim:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        Geo_Builder* subBuilder = [Geo builder];
        if (self.hasGeo) {
          [subBuilder mergeFrom:self.geo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setGeo:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasReqType {
  return result.hasReqType;
}
- (Request_ReqType) reqType {
  return result.reqType;
}
- (Request_Builder*) setReqType:(Request_ReqType) value {
  result.hasReqType = YES;
  result.reqType = value;
  return self;
}
- (Request_Builder*) clearReqType {
  result.hasReqType = NO;
  result.reqType = Request_ReqTypeInit;
  return self;
}
- (BOOL) hasSessionId {
  return result.hasSessionId;
}
- (NSString*) sessionId {
  return result.sessionId;
}
- (Request_Builder*) setSessionId:(NSString*) value {
  result.hasSessionId = YES;
  result.sessionId = value;
  return self;
}
- (Request_Builder*) clearSessionId {
  result.hasSessionId = NO;
  result.sessionId = @"";
  return self;
}
- (BOOL) hasTimestamp {
  return result.hasTimestamp;
}
- (int64_t) timestamp {
  return result.timestamp;
}
- (Request_Builder*) setTimestamp:(int64_t) value {
  result.hasTimestamp = YES;
  result.timestamp = value;
  return self;
}
- (Request_Builder*) clearTimestamp {
  result.hasTimestamp = NO;
  result.timestamp = 0L;
  return self;
}
- (BOOL) hasSession {
  return result.hasSession;
}
- (Session*) session {
  return result.session;
}
- (Request_Builder*) setSession:(Session*) value {
  result.hasSession = YES;
  result.session = value;
  return self;
}
- (Request_Builder*) setSessionBuilder:(Session_Builder*) builderForValue {
  return [self setSession:[builderForValue build]];
}
- (Request_Builder*) mergeSession:(Session*) value {
  if (result.hasSession &&
      result.session != [Session defaultInstance]) {
    result.session =
      [[[Session builderWithPrototype:result.session] mergeFrom:value] buildPartial];
  } else {
    result.session = value;
  }
  result.hasSession = YES;
  return self;
}
- (Request_Builder*) clearSession {
  result.hasSession = NO;
  result.session = [Session defaultInstance];
  return self;
}
- (BOOL) hasInitData {
  return result.hasInitData;
}
- (Data*) initData {
  return result.initData;
}
- (Request_Builder*) setInitData:(Data*) value {
  result.hasInitData = YES;
  result.initData = value;
  return self;
}
- (Request_Builder*) setInitDataBuilder:(Data_Builder*) builderForValue {
  return [self setInitData:[builderForValue build]];
}
- (Request_Builder*) mergeInitData:(Data*) value {
  if (result.hasInitData &&
      result.initData != [Data defaultInstance]) {
    result.initData =
      [[[Data builderWithPrototype:result.initData] mergeFrom:value] buildPartial];
  } else {
    result.initData = value;
  }
  result.hasInitData = YES;
  return self;
}
- (Request_Builder*) clearInitData {
  result.hasInitData = NO;
  result.initData = [Data defaultInstance];
  return self;
}
- (BOOL) hasClaim {
  return result.hasClaim;
}
- (Claim*) claim {
  return result.claim;
}
- (Request_Builder*) setClaim:(Claim*) value {
  result.hasClaim = YES;
  result.claim = value;
  return self;
}
- (Request_Builder*) setClaimBuilder:(Claim_Builder*) builderForValue {
  return [self setClaim:[builderForValue build]];
}
- (Request_Builder*) mergeClaim:(Claim*) value {
  if (result.hasClaim &&
      result.claim != [Claim defaultInstance]) {
    result.claim =
      [[[Claim builderWithPrototype:result.claim] mergeFrom:value] buildPartial];
  } else {
    result.claim = value;
  }
  result.hasClaim = YES;
  return self;
}
- (Request_Builder*) clearClaim {
  result.hasClaim = NO;
  result.claim = [Claim defaultInstance];
  return self;
}
- (BOOL) hasGeo {
  return result.hasGeo;
}
- (Geo*) geo {
  return result.geo;
}
- (Request_Builder*) setGeo:(Geo*) value {
  result.hasGeo = YES;
  result.geo = value;
  return self;
}
- (Request_Builder*) setGeoBuilder:(Geo_Builder*) builderForValue {
  return [self setGeo:[builderForValue build]];
}
- (Request_Builder*) mergeGeo:(Geo*) value {
  if (result.hasGeo &&
      result.geo != [Geo defaultInstance]) {
    result.geo =
      [[[Geo builderWithPrototype:result.geo] mergeFrom:value] buildPartial];
  } else {
    result.geo = value;
  }
  result.hasGeo = YES;
  return self;
}
- (Request_Builder*) clearGeo {
  result.hasGeo = NO;
  result.geo = [Geo defaultInstance];
  return self;
}
@end

@interface Session ()
@property (retain) NSString* sessionId;
@property (retain) NSString* userMedeemId;
@property (retain) NSMutableArray* mutableEventsList;
@property int64_t start;
@property int64_t end;
@property int64_t duration;
@property (retain) NSString* appKey;
@property (retain) NSString* deviceId;
@property (retain) NSString* oldDeviceId;
@property (retain) Data* data;
@property BOOL isNew;
@end

@implementation Session

- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) value {
  hasSessionId_ = !!value;
}
@synthesize sessionId;
- (BOOL) hasUserMedeemId {
  return !!hasUserMedeemId_;
}
- (void) setHasUserMedeemId:(BOOL) value {
  hasUserMedeemId_ = !!value;
}
@synthesize userMedeemId;
@synthesize mutableEventsList;
- (BOOL) hasStart {
  return !!hasStart_;
}
- (void) setHasStart:(BOOL) value {
  hasStart_ = !!value;
}
@synthesize start;
- (BOOL) hasEnd {
  return !!hasEnd_;
}
- (void) setHasEnd:(BOOL) value {
  hasEnd_ = !!value;
}
@synthesize end;
- (BOOL) hasDuration {
  return !!hasDuration_;
}
- (void) setHasDuration:(BOOL) value {
  hasDuration_ = !!value;
}
@synthesize duration;
- (BOOL) hasAppKey {
  return !!hasAppKey_;
}
- (void) setHasAppKey:(BOOL) value {
  hasAppKey_ = !!value;
}
@synthesize appKey;
- (BOOL) hasDeviceId {
  return !!hasDeviceId_;
}
- (void) setHasDeviceId:(BOOL) value {
  hasDeviceId_ = !!value;
}
@synthesize deviceId;
- (BOOL) hasOldDeviceId {
  return !!hasOldDeviceId_;
}
- (void) setHasOldDeviceId:(BOOL) value {
  hasOldDeviceId_ = !!value;
}
@synthesize oldDeviceId;
- (BOOL) hasData {
  return !!hasData_;
}
- (void) setHasData:(BOOL) value {
  hasData_ = !!value;
}
@synthesize data;
- (BOOL) hasIsNew {
  return !!hasIsNew_;
}
- (void) setHasIsNew:(BOOL) value {
  hasIsNew_ = !!value;
}
- (BOOL) isNew {
  return !!isNew_;
}
- (void) setIsNew:(BOOL) value {
  isNew_ = !!value;
}
- (void) dealloc {
  self.sessionId = nil;
  self.userMedeemId = nil;
  self.mutableEventsList = nil;
  self.appKey = nil;
  self.deviceId = nil;
  self.oldDeviceId = nil;
  self.data = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.sessionId = @"";
    self.userMedeemId = @"";
    self.start = 0L;
    self.end = 0L;
    self.duration = 0L;
    self.appKey = @"";
    self.deviceId = @"";
    self.oldDeviceId = @"";
    self.data = [Data defaultInstance];
    self.isNew = NO;
  }
  return self;
}
static Session* defaultSessionInstance = nil;
+ (void) initialize {
  if (self == [Session class]) {
    defaultSessionInstance = [[Session alloc] init];
  }
}
+ (Session*) defaultInstance {
  return defaultSessionInstance;
}
- (Session*) defaultInstance {
  return defaultSessionInstance;
}
- (NSArray*) eventsList {
  return mutableEventsList;
}
- (Event*) eventsAtIndex:(int32_t) index {
  id value = [mutableEventsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasStart) {
    return NO;
  }
  if (!self.hasAppKey) {
    return NO;
  }
  if (!self.hasDeviceId) {
    return NO;
  }
  for (Event* element in self.eventsList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  if (self.hasData) {
    if (!self.data.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSessionId) {
    [output writeString:1 value:self.sessionId];
  }
  if (self.hasUserMedeemId) {
    [output writeString:2 value:self.userMedeemId];
  }
  for (Event* element in self.eventsList) {
    [output writeMessage:3 value:element];
  }
  if (self.hasStart) {
    [output writeInt64:4 value:self.start];
  }
  if (self.hasEnd) {
    [output writeInt64:5 value:self.end];
  }
  if (self.hasDuration) {
    [output writeInt64:6 value:self.duration];
  }
  if (self.hasAppKey) {
    [output writeString:7 value:self.appKey];
  }
  if (self.hasDeviceId) {
    [output writeString:8 value:self.deviceId];
  }
  if (self.hasOldDeviceId) {
    [output writeString:9 value:self.oldDeviceId];
  }
  if (self.hasData) {
    [output writeMessage:10 value:self.data];
  }
  if (self.hasIsNew) {
    [output writeBool:11 value:self.isNew];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasSessionId) {
    size += computeStringSize(1, self.sessionId);
  }
  if (self.hasUserMedeemId) {
    size += computeStringSize(2, self.userMedeemId);
  }
  for (Event* element in self.eventsList) {
    size += computeMessageSize(3, element);
  }
  if (self.hasStart) {
    size += computeInt64Size(4, self.start);
  }
  if (self.hasEnd) {
    size += computeInt64Size(5, self.end);
  }
  if (self.hasDuration) {
    size += computeInt64Size(6, self.duration);
  }
  if (self.hasAppKey) {
    size += computeStringSize(7, self.appKey);
  }
  if (self.hasDeviceId) {
    size += computeStringSize(8, self.deviceId);
  }
  if (self.hasOldDeviceId) {
    size += computeStringSize(9, self.oldDeviceId);
  }
  if (self.hasData) {
    size += computeMessageSize(10, self.data);
  }
  if (self.hasIsNew) {
    size += computeBoolSize(11, self.isNew);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Session*) parseFromData:(NSData*) data {
  return (Session*)[[[Session builder] mergeFromData:data] build];
}
+ (Session*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Session*)[[[Session builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Session*) parseFromInputStream:(NSInputStream*) input {
  return (Session*)[[[Session builder] mergeFromInputStream:input] build];
}
+ (Session*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Session*)[[[Session builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Session*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Session*)[[[Session builder] mergeFromCodedInputStream:input] build];
}
+ (Session*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Session*)[[[Session builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Session_Builder*) builder {
  return [[[Session_Builder alloc] init] autorelease];
}
+ (Session_Builder*) builderWithPrototype:(Session*) prototype {
  return [[Session builder] mergeFrom:prototype];
}
- (Session_Builder*) builder {
  return [Session builder];
}
@end

@interface Session_Builder()
@property (retain) Session* result;
@end

@implementation Session_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Session alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Session_Builder*) clear {
  self.result = [[[Session alloc] init] autorelease];
  return self;
}
- (Session_Builder*) clone {
  return [Session builderWithPrototype:result];
}
- (Session*) defaultInstance {
  return [Session defaultInstance];
}
- (Session*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Session*) buildPartial {
  Session* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Session_Builder*) mergeFrom:(Session*) other {
  if (other == [Session defaultInstance]) {
    return self;
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasUserMedeemId) {
    [self setUserMedeemId:other.userMedeemId];
  }
  if (other.mutableEventsList.count > 0) {
    if (result.mutableEventsList == nil) {
      result.mutableEventsList = [NSMutableArray array];
    }
    [result.mutableEventsList addObjectsFromArray:other.mutableEventsList];
  }
  if (other.hasStart) {
    [self setStart:other.start];
  }
  if (other.hasEnd) {
    [self setEnd:other.end];
  }
  if (other.hasDuration) {
    [self setDuration:other.duration];
  }
  if (other.hasAppKey) {
    [self setAppKey:other.appKey];
  }
  if (other.hasDeviceId) {
    [self setDeviceId:other.deviceId];
  }
  if (other.hasOldDeviceId) {
    [self setOldDeviceId:other.oldDeviceId];
  }
  if (other.hasData) {
    [self mergeData:other.data];
  }
  if (other.hasIsNew) {
    [self setIsNew:other.isNew];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Session_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Session_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setSessionId:[input readString]];
        break;
      }
      case 18: {
        [self setUserMedeemId:[input readString]];
        break;
      }
      case 26: {
        Event_Builder* subBuilder = [Event builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addEvents:[subBuilder buildPartial]];
        break;
      }
      case 32: {
        [self setStart:[input readInt64]];
        break;
      }
      case 40: {
        [self setEnd:[input readInt64]];
        break;
      }
      case 48: {
        [self setDuration:[input readInt64]];
        break;
      }
      case 58: {
        [self setAppKey:[input readString]];
        break;
      }
      case 66: {
        [self setDeviceId:[input readString]];
        break;
      }
      case 74: {
        [self setOldDeviceId:[input readString]];
        break;
      }
      case 82: {
        Data_Builder* subBuilder = [Data builder];
        if (self.hasData) {
          [subBuilder mergeFrom:self.data];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setData:[subBuilder buildPartial]];
        break;
      }
      case 88: {
        [self setIsNew:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasSessionId {
  return result.hasSessionId;
}
- (NSString*) sessionId {
  return result.sessionId;
}
- (Session_Builder*) setSessionId:(NSString*) value {
  result.hasSessionId = YES;
  result.sessionId = value;
  return self;
}
- (Session_Builder*) clearSessionId {
  result.hasSessionId = NO;
  result.sessionId = @"";
  return self;
}
- (BOOL) hasUserMedeemId {
  return result.hasUserMedeemId;
}
- (NSString*) userMedeemId {
  return result.userMedeemId;
}
- (Session_Builder*) setUserMedeemId:(NSString*) value {
  result.hasUserMedeemId = YES;
  result.userMedeemId = value;
  return self;
}
- (Session_Builder*) clearUserMedeemId {
  result.hasUserMedeemId = NO;
  result.userMedeemId = @"";
  return self;
}
- (NSArray*) eventsList {
  if (result.mutableEventsList == nil) { return [NSArray array]; }
  return result.mutableEventsList;
}
- (Event*) eventsAtIndex:(int32_t) index {
  return [result eventsAtIndex:index];
}
- (Session_Builder*) replaceEventsAtIndex:(int32_t) index with:(Event*) value {
  [result.mutableEventsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (Session_Builder*) addAllEvents:(NSArray*) values {
  if (result.mutableEventsList == nil) {
    result.mutableEventsList = [NSMutableArray array];
  }
  [result.mutableEventsList addObjectsFromArray:values];
  return self;
}
- (Session_Builder*) clearEventsList {
  result.mutableEventsList = nil;
  return self;
}
- (Session_Builder*) addEvents:(Event*) value {
  if (result.mutableEventsList == nil) {
    result.mutableEventsList = [NSMutableArray array];
  }
  [result.mutableEventsList addObject:value];
  return self;
}
- (BOOL) hasStart {
  return result.hasStart;
}
- (int64_t) start {
  return result.start;
}
- (Session_Builder*) setStart:(int64_t) value {
  result.hasStart = YES;
  result.start = value;
  return self;
}
- (Session_Builder*) clearStart {
  result.hasStart = NO;
  result.start = 0L;
  return self;
}
- (BOOL) hasEnd {
  return result.hasEnd;
}
- (int64_t) end {
  return result.end;
}
- (Session_Builder*) setEnd:(int64_t) value {
  result.hasEnd = YES;
  result.end = value;
  return self;
}
- (Session_Builder*) clearEnd {
  result.hasEnd = NO;
  result.end = 0L;
  return self;
}
- (BOOL) hasDuration {
  return result.hasDuration;
}
- (int64_t) duration {
  return result.duration;
}
- (Session_Builder*) setDuration:(int64_t) value {
  result.hasDuration = YES;
  result.duration = value;
  return self;
}
- (Session_Builder*) clearDuration {
  result.hasDuration = NO;
  result.duration = 0L;
  return self;
}
- (BOOL) hasAppKey {
  return result.hasAppKey;
}
- (NSString*) appKey {
  return result.appKey;
}
- (Session_Builder*) setAppKey:(NSString*) value {
  result.hasAppKey = YES;
  result.appKey = value;
  return self;
}
- (Session_Builder*) clearAppKey {
  result.hasAppKey = NO;
  result.appKey = @"";
  return self;
}
- (BOOL) hasDeviceId {
  return result.hasDeviceId;
}
- (NSString*) deviceId {
  return result.deviceId;
}
- (Session_Builder*) setDeviceId:(NSString*) value {
  result.hasDeviceId = YES;
  result.deviceId = value;
  return self;
}
- (Session_Builder*) clearDeviceId {
  result.hasDeviceId = NO;
  result.deviceId = @"";
  return self;
}
- (BOOL) hasOldDeviceId {
  return result.hasOldDeviceId;
}
- (NSString*) oldDeviceId {
  return result.oldDeviceId;
}
- (Session_Builder*) setOldDeviceId:(NSString*) value {
  result.hasOldDeviceId = YES;
  result.oldDeviceId = value;
  return self;
}
- (Session_Builder*) clearOldDeviceId {
  result.hasOldDeviceId = NO;
  result.oldDeviceId = @"";
  return self;
}
- (BOOL) hasData {
  return result.hasData;
}
- (Data*) data {
  return result.data;
}
- (Session_Builder*) setData:(Data*) value {
  result.hasData = YES;
  result.data = value;
  return self;
}
- (Session_Builder*) setDataBuilder:(Data_Builder*) builderForValue {
  return [self setData:[builderForValue build]];
}
- (Session_Builder*) mergeData:(Data*) value {
  if (result.hasData &&
      result.data != [Data defaultInstance]) {
    result.data =
      [[[Data builderWithPrototype:result.data] mergeFrom:value] buildPartial];
  } else {
    result.data = value;
  }
  result.hasData = YES;
  return self;
}
- (Session_Builder*) clearData {
  result.hasData = NO;
  result.data = [Data defaultInstance];
  return self;
}
- (BOOL) hasIsNew {
  return result.hasIsNew;
}
- (BOOL) isNew {
  return result.isNew;
}
- (Session_Builder*) setIsNew:(BOOL) value {
  result.hasIsNew = YES;
  result.isNew = value;
  return self;
}
- (Session_Builder*) clearIsNew {
  result.hasIsNew = NO;
  result.isNew = NO;
  return self;
}
@end

@interface Init ()
@property (retain) Data* initData;
@property int64_t timestamp;
@end

@implementation Init

- (BOOL) hasInitData {
  return !!hasInitData_;
}
- (void) setHasInitData:(BOOL) value {
  hasInitData_ = !!value;
}
@synthesize initData;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) value {
  hasTimestamp_ = !!value;
}
@synthesize timestamp;
- (void) dealloc {
  self.initData = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.initData = [Data defaultInstance];
    self.timestamp = 0L;
  }
  return self;
}
static Init* defaultInitInstance = nil;
+ (void) initialize {
  if (self == [Init class]) {
    defaultInitInstance = [[Init alloc] init];
  }
}
+ (Init*) defaultInstance {
  return defaultInitInstance;
}
- (Init*) defaultInstance {
  return defaultInitInstance;
}
- (BOOL) isInitialized {
  if (!self.hasInitData) {
    return NO;
  }
  if (!self.hasTimestamp) {
    return NO;
  }
  if (!self.initData.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasInitData) {
    [output writeMessage:1 value:self.initData];
  }
  if (self.hasTimestamp) {
    [output writeInt64:2 value:self.timestamp];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasInitData) {
    size += computeMessageSize(1, self.initData);
  }
  if (self.hasTimestamp) {
    size += computeInt64Size(2, self.timestamp);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Init*) parseFromData:(NSData*) data {
  return (Init*)[[[Init builder] mergeFromData:data] build];
}
+ (Init*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Init*)[[[Init builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Init*) parseFromInputStream:(NSInputStream*) input {
  return (Init*)[[[Init builder] mergeFromInputStream:input] build];
}
+ (Init*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Init*)[[[Init builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Init*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Init*)[[[Init builder] mergeFromCodedInputStream:input] build];
}
+ (Init*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Init*)[[[Init builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Init_Builder*) builder {
  return [[[Init_Builder alloc] init] autorelease];
}
+ (Init_Builder*) builderWithPrototype:(Init*) prototype {
  return [[Init builder] mergeFrom:prototype];
}
- (Init_Builder*) builder {
  return [Init builder];
}
@end

@interface Init_Builder()
@property (retain) Init* result;
@end

@implementation Init_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Init alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Init_Builder*) clear {
  self.result = [[[Init alloc] init] autorelease];
  return self;
}
- (Init_Builder*) clone {
  return [Init builderWithPrototype:result];
}
- (Init*) defaultInstance {
  return [Init defaultInstance];
}
- (Init*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Init*) buildPartial {
  Init* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Init_Builder*) mergeFrom:(Init*) other {
  if (other == [Init defaultInstance]) {
    return self;
  }
  if (other.hasInitData) {
    [self mergeInitData:other.initData];
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Init_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Init_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        Data_Builder* subBuilder = [Data builder];
        if (self.hasInitData) {
          [subBuilder mergeFrom:self.initData];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setInitData:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setTimestamp:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasInitData {
  return result.hasInitData;
}
- (Data*) initData {
  return result.initData;
}
- (Init_Builder*) setInitData:(Data*) value {
  result.hasInitData = YES;
  result.initData = value;
  return self;
}
- (Init_Builder*) setInitDataBuilder:(Data_Builder*) builderForValue {
  return [self setInitData:[builderForValue build]];
}
- (Init_Builder*) mergeInitData:(Data*) value {
  if (result.hasInitData &&
      result.initData != [Data defaultInstance]) {
    result.initData =
      [[[Data builderWithPrototype:result.initData] mergeFrom:value] buildPartial];
  } else {
    result.initData = value;
  }
  result.hasInitData = YES;
  return self;
}
- (Init_Builder*) clearInitData {
  result.hasInitData = NO;
  result.initData = [Data defaultInstance];
  return self;
}
- (BOOL) hasTimestamp {
  return result.hasTimestamp;
}
- (int64_t) timestamp {
  return result.timestamp;
}
- (Init_Builder*) setTimestamp:(int64_t) value {
  result.hasTimestamp = YES;
  result.timestamp = value;
  return self;
}
- (Init_Builder*) clearTimestamp {
  result.hasTimestamp = NO;
  result.timestamp = 0L;
  return self;
}
@end

@interface AdReq ()
@property (retain) Data* data;
@property (retain) Geo* geo;
@end

@implementation AdReq

- (BOOL) hasData {
  return !!hasData_;
}
- (void) setHasData:(BOOL) value {
  hasData_ = !!value;
}
@synthesize data;
- (BOOL) hasGeo {
  return !!hasGeo_;
}
- (void) setHasGeo:(BOOL) value {
  hasGeo_ = !!value;
}
@synthesize geo;
- (void) dealloc {
  self.data = nil;
  self.geo = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.data = [Data defaultInstance];
    self.geo = [Geo defaultInstance];
  }
  return self;
}
static AdReq* defaultAdReqInstance = nil;
+ (void) initialize {
  if (self == [AdReq class]) {
    defaultAdReqInstance = [[AdReq alloc] init];
  }
}
+ (AdReq*) defaultInstance {
  return defaultAdReqInstance;
}
- (AdReq*) defaultInstance {
  return defaultAdReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasData) {
    return NO;
  }
  if (!self.data.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasData) {
    [output writeMessage:1 value:self.data];
  }
  if (self.hasGeo) {
    [output writeMessage:2 value:self.geo];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasData) {
    size += computeMessageSize(1, self.data);
  }
  if (self.hasGeo) {
    size += computeMessageSize(2, self.geo);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (AdReq*) parseFromData:(NSData*) data {
  return (AdReq*)[[[AdReq builder] mergeFromData:data] build];
}
+ (AdReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AdReq*)[[[AdReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AdReq*) parseFromInputStream:(NSInputStream*) input {
  return (AdReq*)[[[AdReq builder] mergeFromInputStream:input] build];
}
+ (AdReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AdReq*)[[[AdReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AdReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AdReq*)[[[AdReq builder] mergeFromCodedInputStream:input] build];
}
+ (AdReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AdReq*)[[[AdReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AdReq_Builder*) builder {
  return [[[AdReq_Builder alloc] init] autorelease];
}
+ (AdReq_Builder*) builderWithPrototype:(AdReq*) prototype {
  return [[AdReq builder] mergeFrom:prototype];
}
- (AdReq_Builder*) builder {
  return [AdReq builder];
}
@end

@interface AdReq_Builder()
@property (retain) AdReq* result;
@end

@implementation AdReq_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[AdReq alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (AdReq_Builder*) clear {
  self.result = [[[AdReq alloc] init] autorelease];
  return self;
}
- (AdReq_Builder*) clone {
  return [AdReq builderWithPrototype:result];
}
- (AdReq*) defaultInstance {
  return [AdReq defaultInstance];
}
- (AdReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AdReq*) buildPartial {
  AdReq* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (AdReq_Builder*) mergeFrom:(AdReq*) other {
  if (other == [AdReq defaultInstance]) {
    return self;
  }
  if (other.hasData) {
    [self mergeData:other.data];
  }
  if (other.hasGeo) {
    [self mergeGeo:other.geo];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AdReq_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AdReq_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        Data_Builder* subBuilder = [Data builder];
        if (self.hasData) {
          [subBuilder mergeFrom:self.data];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setData:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        Geo_Builder* subBuilder = [Geo builder];
        if (self.hasGeo) {
          [subBuilder mergeFrom:self.geo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setGeo:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasData {
  return result.hasData;
}
- (Data*) data {
  return result.data;
}
- (AdReq_Builder*) setData:(Data*) value {
  result.hasData = YES;
  result.data = value;
  return self;
}
- (AdReq_Builder*) setDataBuilder:(Data_Builder*) builderForValue {
  return [self setData:[builderForValue build]];
}
- (AdReq_Builder*) mergeData:(Data*) value {
  if (result.hasData &&
      result.data != [Data defaultInstance]) {
    result.data =
      [[[Data builderWithPrototype:result.data] mergeFrom:value] buildPartial];
  } else {
    result.data = value;
  }
  result.hasData = YES;
  return self;
}
- (AdReq_Builder*) clearData {
  result.hasData = NO;
  result.data = [Data defaultInstance];
  return self;
}
- (BOOL) hasGeo {
  return result.hasGeo;
}
- (Geo*) geo {
  return result.geo;
}
- (AdReq_Builder*) setGeo:(Geo*) value {
  result.hasGeo = YES;
  result.geo = value;
  return self;
}
- (AdReq_Builder*) setGeoBuilder:(Geo_Builder*) builderForValue {
  return [self setGeo:[builderForValue build]];
}
- (AdReq_Builder*) mergeGeo:(Geo*) value {
  if (result.hasGeo &&
      result.geo != [Geo defaultInstance]) {
    result.geo =
      [[[Geo builderWithPrototype:result.geo] mergeFrom:value] buildPartial];
  } else {
    result.geo = value;
  }
  result.hasGeo = YES;
  return self;
}
- (AdReq_Builder*) clearGeo {
  result.hasGeo = NO;
  result.geo = [Geo defaultInstance];
  return self;
}
@end

@interface AdResp ()
@property (retain) NSMutableArray* mutableCampaignsList;
@property (retain) Error* error;
@end

@implementation AdResp

@synthesize mutableCampaignsList;
- (BOOL) hasError {
  return !!hasError_;
}
- (void) setHasError:(BOOL) value {
  hasError_ = !!value;
}
@synthesize error;
- (void) dealloc {
  self.mutableCampaignsList = nil;
  self.error = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.error = [Error defaultInstance];
  }
  return self;
}
static AdResp* defaultAdRespInstance = nil;
+ (void) initialize {
  if (self == [AdResp class]) {
    defaultAdRespInstance = [[AdResp alloc] init];
  }
}
+ (AdResp*) defaultInstance {
  return defaultAdRespInstance;
}
- (AdResp*) defaultInstance {
  return defaultAdRespInstance;
}
- (NSArray*) campaignsList {
  return mutableCampaignsList;
}
- (Campaign*) campaignsAtIndex:(int32_t) index {
  id value = [mutableCampaignsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (Campaign* element in self.campaignsList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  if (self.hasError) {
    if (!self.error.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (Campaign* element in self.campaignsList) {
    [output writeMessage:1 value:element];
  }
  if (self.hasError) {
    [output writeMessage:2 value:self.error];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (Campaign* element in self.campaignsList) {
    size += computeMessageSize(1, element);
  }
  if (self.hasError) {
    size += computeMessageSize(2, self.error);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (AdResp*) parseFromData:(NSData*) data {
  return (AdResp*)[[[AdResp builder] mergeFromData:data] build];
}
+ (AdResp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AdResp*)[[[AdResp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AdResp*) parseFromInputStream:(NSInputStream*) input {
  return (AdResp*)[[[AdResp builder] mergeFromInputStream:input] build];
}
+ (AdResp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AdResp*)[[[AdResp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AdResp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AdResp*)[[[AdResp builder] mergeFromCodedInputStream:input] build];
}
+ (AdResp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AdResp*)[[[AdResp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AdResp_Builder*) builder {
  return [[[AdResp_Builder alloc] init] autorelease];
}
+ (AdResp_Builder*) builderWithPrototype:(AdResp*) prototype {
  return [[AdResp builder] mergeFrom:prototype];
}
- (AdResp_Builder*) builder {
  return [AdResp builder];
}
@end

@interface AdResp_Builder()
@property (retain) AdResp* result;
@end

@implementation AdResp_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[AdResp alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (AdResp_Builder*) clear {
  self.result = [[[AdResp alloc] init] autorelease];
  return self;
}
- (AdResp_Builder*) clone {
  return [AdResp builderWithPrototype:result];
}
- (AdResp*) defaultInstance {
  return [AdResp defaultInstance];
}
- (AdResp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AdResp*) buildPartial {
  AdResp* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (AdResp_Builder*) mergeFrom:(AdResp*) other {
  if (other == [AdResp defaultInstance]) {
    return self;
  }
  if (other.mutableCampaignsList.count > 0) {
    if (result.mutableCampaignsList == nil) {
      result.mutableCampaignsList = [NSMutableArray array];
    }
    [result.mutableCampaignsList addObjectsFromArray:other.mutableCampaignsList];
  }
  if (other.hasError) {
    [self mergeError:other.error];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AdResp_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AdResp_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        Campaign_Builder* subBuilder = [Campaign builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCampaigns:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        Error_Builder* subBuilder = [Error builder];
        if (self.hasError) {
          [subBuilder mergeFrom:self.error];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setError:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) campaignsList {
  if (result.mutableCampaignsList == nil) { return [NSArray array]; }
  return result.mutableCampaignsList;
}
- (Campaign*) campaignsAtIndex:(int32_t) index {
  return [result campaignsAtIndex:index];
}
- (AdResp_Builder*) replaceCampaignsAtIndex:(int32_t) index with:(Campaign*) value {
  [result.mutableCampaignsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (AdResp_Builder*) addAllCampaigns:(NSArray*) values {
  if (result.mutableCampaignsList == nil) {
    result.mutableCampaignsList = [NSMutableArray array];
  }
  [result.mutableCampaignsList addObjectsFromArray:values];
  return self;
}
- (AdResp_Builder*) clearCampaignsList {
  result.mutableCampaignsList = nil;
  return self;
}
- (AdResp_Builder*) addCampaigns:(Campaign*) value {
  if (result.mutableCampaignsList == nil) {
    result.mutableCampaignsList = [NSMutableArray array];
  }
  [result.mutableCampaignsList addObject:value];
  return self;
}
- (BOOL) hasError {
  return result.hasError;
}
- (Error*) error {
  return result.error;
}
- (AdResp_Builder*) setError:(Error*) value {
  result.hasError = YES;
  result.error = value;
  return self;
}
- (AdResp_Builder*) setErrorBuilder:(Error_Builder*) builderForValue {
  return [self setError:[builderForValue build]];
}
- (AdResp_Builder*) mergeError:(Error*) value {
  if (result.hasError &&
      result.error != [Error defaultInstance]) {
    result.error =
      [[[Error builderWithPrototype:result.error] mergeFrom:value] buildPartial];
  } else {
    result.error = value;
  }
  result.hasError = YES;
  return self;
}
- (AdResp_Builder*) clearError {
  result.hasError = NO;
  result.error = [Error defaultInstance];
  return self;
}
@end

@interface Data ()
@property (retain) User* user;
@property (retain) App* app;
@property (retain) Device* device;
@end

@implementation Data

- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) value {
  hasUser_ = !!value;
}
@synthesize user;
- (BOOL) hasApp {
  return !!hasApp_;
}
- (void) setHasApp:(BOOL) value {
  hasApp_ = !!value;
}
@synthesize app;
- (BOOL) hasDevice {
  return !!hasDevice_;
}
- (void) setHasDevice:(BOOL) value {
  hasDevice_ = !!value;
}
@synthesize device;
- (void) dealloc {
  self.user = nil;
  self.app = nil;
  self.device = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.user = [User defaultInstance];
    self.app = [App defaultInstance];
    self.device = [Device defaultInstance];
  }
  return self;
}
static Data* defaultDataInstance = nil;
+ (void) initialize {
  if (self == [Data class]) {
    defaultDataInstance = [[Data alloc] init];
  }
}
+ (Data*) defaultInstance {
  return defaultDataInstance;
}
- (Data*) defaultInstance {
  return defaultDataInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUser) {
    return NO;
  }
  if (!self.hasApp) {
    return NO;
  }
  if (!self.hasDevice) {
    return NO;
  }
  if (!self.user.isInitialized) {
    return NO;
  }
  if (!self.app.isInitialized) {
    return NO;
  }
  if (!self.device.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUser) {
    [output writeMessage:1 value:self.user];
  }
  if (self.hasApp) {
    [output writeMessage:2 value:self.app];
  }
  if (self.hasDevice) {
    [output writeMessage:3 value:self.device];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUser) {
    size += computeMessageSize(1, self.user);
  }
  if (self.hasApp) {
    size += computeMessageSize(2, self.app);
  }
  if (self.hasDevice) {
    size += computeMessageSize(3, self.device);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Data*) parseFromData:(NSData*) data {
  return (Data*)[[[Data builder] mergeFromData:data] build];
}
+ (Data*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Data*)[[[Data builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Data*) parseFromInputStream:(NSInputStream*) input {
  return (Data*)[[[Data builder] mergeFromInputStream:input] build];
}
+ (Data*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Data*)[[[Data builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Data*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Data*)[[[Data builder] mergeFromCodedInputStream:input] build];
}
+ (Data*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Data*)[[[Data builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Data_Builder*) builder {
  return [[[Data_Builder alloc] init] autorelease];
}
+ (Data_Builder*) builderWithPrototype:(Data*) prototype {
  return [[Data builder] mergeFrom:prototype];
}
- (Data_Builder*) builder {
  return [Data builder];
}
@end

@interface Data_Builder()
@property (retain) Data* result;
@end

@implementation Data_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Data alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Data_Builder*) clear {
  self.result = [[[Data alloc] init] autorelease];
  return self;
}
- (Data_Builder*) clone {
  return [Data builderWithPrototype:result];
}
- (Data*) defaultInstance {
  return [Data defaultInstance];
}
- (Data*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Data*) buildPartial {
  Data* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Data_Builder*) mergeFrom:(Data*) other {
  if (other == [Data defaultInstance]) {
    return self;
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.hasApp) {
    [self mergeApp:other.app];
  }
  if (other.hasDevice) {
    [self mergeDevice:other.device];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Data_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Data_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        User_Builder* subBuilder = [User builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        App_Builder* subBuilder = [App builder];
        if (self.hasApp) {
          [subBuilder mergeFrom:self.app];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setApp:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        Device_Builder* subBuilder = [Device builder];
        if (self.hasDevice) {
          [subBuilder mergeFrom:self.device];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDevice:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasUser {
  return result.hasUser;
}
- (User*) user {
  return result.user;
}
- (Data_Builder*) setUser:(User*) value {
  result.hasUser = YES;
  result.user = value;
  return self;
}
- (Data_Builder*) setUserBuilder:(User_Builder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (Data_Builder*) mergeUser:(User*) value {
  if (result.hasUser &&
      result.user != [User defaultInstance]) {
    result.user =
      [[[User builderWithPrototype:result.user] mergeFrom:value] buildPartial];
  } else {
    result.user = value;
  }
  result.hasUser = YES;
  return self;
}
- (Data_Builder*) clearUser {
  result.hasUser = NO;
  result.user = [User defaultInstance];
  return self;
}
- (BOOL) hasApp {
  return result.hasApp;
}
- (App*) app {
  return result.app;
}
- (Data_Builder*) setApp:(App*) value {
  result.hasApp = YES;
  result.app = value;
  return self;
}
- (Data_Builder*) setAppBuilder:(App_Builder*) builderForValue {
  return [self setApp:[builderForValue build]];
}
- (Data_Builder*) mergeApp:(App*) value {
  if (result.hasApp &&
      result.app != [App defaultInstance]) {
    result.app =
      [[[App builderWithPrototype:result.app] mergeFrom:value] buildPartial];
  } else {
    result.app = value;
  }
  result.hasApp = YES;
  return self;
}
- (Data_Builder*) clearApp {
  result.hasApp = NO;
  result.app = [App defaultInstance];
  return self;
}
- (BOOL) hasDevice {
  return result.hasDevice;
}
- (Device*) device {
  return result.device;
}
- (Data_Builder*) setDevice:(Device*) value {
  result.hasDevice = YES;
  result.device = value;
  return self;
}
- (Data_Builder*) setDeviceBuilder:(Device_Builder*) builderForValue {
  return [self setDevice:[builderForValue build]];
}
- (Data_Builder*) mergeDevice:(Device*) value {
  if (result.hasDevice &&
      result.device != [Device defaultInstance]) {
    result.device =
      [[[Device builderWithPrototype:result.device] mergeFrom:value] buildPartial];
  } else {
    result.device = value;
  }
  result.hasDevice = YES;
  return self;
}
- (Data_Builder*) clearDevice {
  result.hasDevice = NO;
  result.device = [Device defaultInstance];
  return self;
}
@end

@interface SessionData ()
@property (retain) NSString* userMedeemId;
@property (retain) NSString* appKey;
@property (retain) NSString* deviceId;
@property (retain) NSString* oldDeviceId;
@end

@implementation SessionData

- (BOOL) hasUserMedeemId {
  return !!hasUserMedeemId_;
}
- (void) setHasUserMedeemId:(BOOL) value {
  hasUserMedeemId_ = !!value;
}
@synthesize userMedeemId;
- (BOOL) hasAppKey {
  return !!hasAppKey_;
}
- (void) setHasAppKey:(BOOL) value {
  hasAppKey_ = !!value;
}
@synthesize appKey;
- (BOOL) hasDeviceId {
  return !!hasDeviceId_;
}
- (void) setHasDeviceId:(BOOL) value {
  hasDeviceId_ = !!value;
}
@synthesize deviceId;
- (BOOL) hasOldDeviceId {
  return !!hasOldDeviceId_;
}
- (void) setHasOldDeviceId:(BOOL) value {
  hasOldDeviceId_ = !!value;
}
@synthesize oldDeviceId;
- (void) dealloc {
  self.userMedeemId = nil;
  self.appKey = nil;
  self.deviceId = nil;
  self.oldDeviceId = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userMedeemId = @"";
    self.appKey = @"";
    self.deviceId = @"";
    self.oldDeviceId = @"";
  }
  return self;
}
static SessionData* defaultSessionDataInstance = nil;
+ (void) initialize {
  if (self == [SessionData class]) {
    defaultSessionDataInstance = [[SessionData alloc] init];
  }
}
+ (SessionData*) defaultInstance {
  return defaultSessionDataInstance;
}
- (SessionData*) defaultInstance {
  return defaultSessionDataInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserMedeemId) {
    return NO;
  }
  if (!self.hasAppKey) {
    return NO;
  }
  if (!self.hasDeviceId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserMedeemId) {
    [output writeString:1 value:self.userMedeemId];
  }
  if (self.hasAppKey) {
    [output writeString:2 value:self.appKey];
  }
  if (self.hasDeviceId) {
    [output writeString:3 value:self.deviceId];
  }
  if (self.hasOldDeviceId) {
    [output writeString:4 value:self.oldDeviceId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserMedeemId) {
    size += computeStringSize(1, self.userMedeemId);
  }
  if (self.hasAppKey) {
    size += computeStringSize(2, self.appKey);
  }
  if (self.hasDeviceId) {
    size += computeStringSize(3, self.deviceId);
  }
  if (self.hasOldDeviceId) {
    size += computeStringSize(4, self.oldDeviceId);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (SessionData*) parseFromData:(NSData*) data {
  return (SessionData*)[[[SessionData builder] mergeFromData:data] build];
}
+ (SessionData*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SessionData*)[[[SessionData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SessionData*) parseFromInputStream:(NSInputStream*) input {
  return (SessionData*)[[[SessionData builder] mergeFromInputStream:input] build];
}
+ (SessionData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SessionData*)[[[SessionData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SessionData*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SessionData*)[[[SessionData builder] mergeFromCodedInputStream:input] build];
}
+ (SessionData*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SessionData*)[[[SessionData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SessionData_Builder*) builder {
  return [[[SessionData_Builder alloc] init] autorelease];
}
+ (SessionData_Builder*) builderWithPrototype:(SessionData*) prototype {
  return [[SessionData builder] mergeFrom:prototype];
}
- (SessionData_Builder*) builder {
  return [SessionData builder];
}
@end

@interface SessionData_Builder()
@property (retain) SessionData* result;
@end

@implementation SessionData_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[SessionData alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (SessionData_Builder*) clear {
  self.result = [[[SessionData alloc] init] autorelease];
  return self;
}
- (SessionData_Builder*) clone {
  return [SessionData builderWithPrototype:result];
}
- (SessionData*) defaultInstance {
  return [SessionData defaultInstance];
}
- (SessionData*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SessionData*) buildPartial {
  SessionData* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (SessionData_Builder*) mergeFrom:(SessionData*) other {
  if (other == [SessionData defaultInstance]) {
    return self;
  }
  if (other.hasUserMedeemId) {
    [self setUserMedeemId:other.userMedeemId];
  }
  if (other.hasAppKey) {
    [self setAppKey:other.appKey];
  }
  if (other.hasDeviceId) {
    [self setDeviceId:other.deviceId];
  }
  if (other.hasOldDeviceId) {
    [self setOldDeviceId:other.oldDeviceId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SessionData_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SessionData_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserMedeemId:[input readString]];
        break;
      }
      case 18: {
        [self setAppKey:[input readString]];
        break;
      }
      case 26: {
        [self setDeviceId:[input readString]];
        break;
      }
      case 34: {
        [self setOldDeviceId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUserMedeemId {
  return result.hasUserMedeemId;
}
- (NSString*) userMedeemId {
  return result.userMedeemId;
}
- (SessionData_Builder*) setUserMedeemId:(NSString*) value {
  result.hasUserMedeemId = YES;
  result.userMedeemId = value;
  return self;
}
- (SessionData_Builder*) clearUserMedeemId {
  result.hasUserMedeemId = NO;
  result.userMedeemId = @"";
  return self;
}
- (BOOL) hasAppKey {
  return result.hasAppKey;
}
- (NSString*) appKey {
  return result.appKey;
}
- (SessionData_Builder*) setAppKey:(NSString*) value {
  result.hasAppKey = YES;
  result.appKey = value;
  return self;
}
- (SessionData_Builder*) clearAppKey {
  result.hasAppKey = NO;
  result.appKey = @"";
  return self;
}
- (BOOL) hasDeviceId {
  return result.hasDeviceId;
}
- (NSString*) deviceId {
  return result.deviceId;
}
- (SessionData_Builder*) setDeviceId:(NSString*) value {
  result.hasDeviceId = YES;
  result.deviceId = value;
  return self;
}
- (SessionData_Builder*) clearDeviceId {
  result.hasDeviceId = NO;
  result.deviceId = @"";
  return self;
}
- (BOOL) hasOldDeviceId {
  return result.hasOldDeviceId;
}
- (NSString*) oldDeviceId {
  return result.oldDeviceId;
}
- (SessionData_Builder*) setOldDeviceId:(NSString*) value {
  result.hasOldDeviceId = YES;
  result.oldDeviceId = value;
  return self;
}
- (SessionData_Builder*) clearOldDeviceId {
  result.hasOldDeviceId = NO;
  result.oldDeviceId = @"";
  return self;
}
@end

@interface Claim ()
@property (retain) NSString* campaignId;
@property (retain) NSString* userMedeemId;
@property (retain) NSString* deviceId;
@property (retain) NSString* appKey;
@property (retain) Network* contact;
@end

@implementation Claim

- (BOOL) hasCampaignId {
  return !!hasCampaignId_;
}
- (void) setHasCampaignId:(BOOL) value {
  hasCampaignId_ = !!value;
}
@synthesize campaignId;
- (BOOL) hasUserMedeemId {
  return !!hasUserMedeemId_;
}
- (void) setHasUserMedeemId:(BOOL) value {
  hasUserMedeemId_ = !!value;
}
@synthesize userMedeemId;
- (BOOL) hasDeviceId {
  return !!hasDeviceId_;
}
- (void) setHasDeviceId:(BOOL) value {
  hasDeviceId_ = !!value;
}
@synthesize deviceId;
- (BOOL) hasAppKey {
  return !!hasAppKey_;
}
- (void) setHasAppKey:(BOOL) value {
  hasAppKey_ = !!value;
}
@synthesize appKey;
- (BOOL) hasContact {
  return !!hasContact_;
}
- (void) setHasContact:(BOOL) value {
  hasContact_ = !!value;
}
@synthesize contact;
- (void) dealloc {
  self.campaignId = nil;
  self.userMedeemId = nil;
  self.deviceId = nil;
  self.appKey = nil;
  self.contact = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.campaignId = @"";
    self.userMedeemId = @"";
    self.deviceId = @"";
    self.appKey = @"";
    self.contact = [Network defaultInstance];
  }
  return self;
}
static Claim* defaultClaimInstance = nil;
+ (void) initialize {
  if (self == [Claim class]) {
    defaultClaimInstance = [[Claim alloc] init];
  }
}
+ (Claim*) defaultInstance {
  return defaultClaimInstance;
}
- (Claim*) defaultInstance {
  return defaultClaimInstance;
}
- (BOOL) isInitialized {
  if (!self.hasCampaignId) {
    return NO;
  }
  if (!self.hasUserMedeemId) {
    return NO;
  }
  if (!self.hasDeviceId) {
    return NO;
  }
  if (!self.hasAppKey) {
    return NO;
  }
  if (!self.hasContact) {
    return NO;
  }
  if (!self.contact.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCampaignId) {
    [output writeString:1 value:self.campaignId];
  }
  if (self.hasUserMedeemId) {
    [output writeString:2 value:self.userMedeemId];
  }
  if (self.hasDeviceId) {
    [output writeString:3 value:self.deviceId];
  }
  if (self.hasAppKey) {
    [output writeString:4 value:self.appKey];
  }
  if (self.hasContact) {
    [output writeMessage:5 value:self.contact];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCampaignId) {
    size += computeStringSize(1, self.campaignId);
  }
  if (self.hasUserMedeemId) {
    size += computeStringSize(2, self.userMedeemId);
  }
  if (self.hasDeviceId) {
    size += computeStringSize(3, self.deviceId);
  }
  if (self.hasAppKey) {
    size += computeStringSize(4, self.appKey);
  }
  if (self.hasContact) {
    size += computeMessageSize(5, self.contact);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Claim*) parseFromData:(NSData*) data {
  return (Claim*)[[[Claim builder] mergeFromData:data] build];
}
+ (Claim*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Claim*)[[[Claim builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Claim*) parseFromInputStream:(NSInputStream*) input {
  return (Claim*)[[[Claim builder] mergeFromInputStream:input] build];
}
+ (Claim*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Claim*)[[[Claim builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Claim*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Claim*)[[[Claim builder] mergeFromCodedInputStream:input] build];
}
+ (Claim*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Claim*)[[[Claim builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Claim_Builder*) builder {
  return [[[Claim_Builder alloc] init] autorelease];
}
+ (Claim_Builder*) builderWithPrototype:(Claim*) prototype {
  return [[Claim builder] mergeFrom:prototype];
}
- (Claim_Builder*) builder {
  return [Claim builder];
}
@end

@interface Claim_Builder()
@property (retain) Claim* result;
@end

@implementation Claim_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Claim alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Claim_Builder*) clear {
  self.result = [[[Claim alloc] init] autorelease];
  return self;
}
- (Claim_Builder*) clone {
  return [Claim builderWithPrototype:result];
}
- (Claim*) defaultInstance {
  return [Claim defaultInstance];
}
- (Claim*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Claim*) buildPartial {
  Claim* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Claim_Builder*) mergeFrom:(Claim*) other {
  if (other == [Claim defaultInstance]) {
    return self;
  }
  if (other.hasCampaignId) {
    [self setCampaignId:other.campaignId];
  }
  if (other.hasUserMedeemId) {
    [self setUserMedeemId:other.userMedeemId];
  }
  if (other.hasDeviceId) {
    [self setDeviceId:other.deviceId];
  }
  if (other.hasAppKey) {
    [self setAppKey:other.appKey];
  }
  if (other.hasContact) {
    [self mergeContact:other.contact];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Claim_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Claim_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setCampaignId:[input readString]];
        break;
      }
      case 18: {
        [self setUserMedeemId:[input readString]];
        break;
      }
      case 26: {
        [self setDeviceId:[input readString]];
        break;
      }
      case 34: {
        [self setAppKey:[input readString]];
        break;
      }
      case 42: {
        Network_Builder* subBuilder = [Network builder];
        if (self.hasContact) {
          [subBuilder mergeFrom:self.contact];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setContact:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasCampaignId {
  return result.hasCampaignId;
}
- (NSString*) campaignId {
  return result.campaignId;
}
- (Claim_Builder*) setCampaignId:(NSString*) value {
  result.hasCampaignId = YES;
  result.campaignId = value;
  return self;
}
- (Claim_Builder*) clearCampaignId {
  result.hasCampaignId = NO;
  result.campaignId = @"";
  return self;
}
- (BOOL) hasUserMedeemId {
  return result.hasUserMedeemId;
}
- (NSString*) userMedeemId {
  return result.userMedeemId;
}
- (Claim_Builder*) setUserMedeemId:(NSString*) value {
  result.hasUserMedeemId = YES;
  result.userMedeemId = value;
  return self;
}
- (Claim_Builder*) clearUserMedeemId {
  result.hasUserMedeemId = NO;
  result.userMedeemId = @"";
  return self;
}
- (BOOL) hasDeviceId {
  return result.hasDeviceId;
}
- (NSString*) deviceId {
  return result.deviceId;
}
- (Claim_Builder*) setDeviceId:(NSString*) value {
  result.hasDeviceId = YES;
  result.deviceId = value;
  return self;
}
- (Claim_Builder*) clearDeviceId {
  result.hasDeviceId = NO;
  result.deviceId = @"";
  return self;
}
- (BOOL) hasAppKey {
  return result.hasAppKey;
}
- (NSString*) appKey {
  return result.appKey;
}
- (Claim_Builder*) setAppKey:(NSString*) value {
  result.hasAppKey = YES;
  result.appKey = value;
  return self;
}
- (Claim_Builder*) clearAppKey {
  result.hasAppKey = NO;
  result.appKey = @"";
  return self;
}
- (BOOL) hasContact {
  return result.hasContact;
}
- (Network*) contact {
  return result.contact;
}
- (Claim_Builder*) setContact:(Network*) value {
  result.hasContact = YES;
  result.contact = value;
  return self;
}
- (Claim_Builder*) setContactBuilder:(Network_Builder*) builderForValue {
  return [self setContact:[builderForValue build]];
}
- (Claim_Builder*) mergeContact:(Network*) value {
  if (result.hasContact &&
      result.contact != [Network defaultInstance]) {
    result.contact =
      [[[Network builderWithPrototype:result.contact] mergeFrom:value] buildPartial];
  } else {
    result.contact = value;
  }
  result.hasContact = YES;
  return self;
}
- (Claim_Builder*) clearContact {
  result.hasContact = NO;
  result.contact = [Network defaultInstance];
  return self;
}
@end

@interface Geo ()
@property Float64 lat;
@property Float64 lon;
@property (retain) NSString* ip;
@property (retain) NSString* tz;
@property (retain) NSString* locale;
@end

@implementation Geo

- (BOOL) hasLat {
  return !!hasLat_;
}
- (void) setHasLat:(BOOL) value {
  hasLat_ = !!value;
}
@synthesize lat;
- (BOOL) hasLon {
  return !!hasLon_;
}
- (void) setHasLon:(BOOL) value {
  hasLon_ = !!value;
}
@synthesize lon;
- (BOOL) hasIp {
  return !!hasIp_;
}
- (void) setHasIp:(BOOL) value {
  hasIp_ = !!value;
}
@synthesize ip;
- (BOOL) hasTz {
  return !!hasTz_;
}
- (void) setHasTz:(BOOL) value {
  hasTz_ = !!value;
}
@synthesize tz;
- (BOOL) hasLocale {
  return !!hasLocale_;
}
- (void) setHasLocale:(BOOL) value {
  hasLocale_ = !!value;
}
@synthesize locale;
- (void) dealloc {
  self.ip = nil;
  self.tz = nil;
  self.locale = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.lat = 0;
    self.lon = 0;
    self.ip = @"";
    self.tz = @"";
    self.locale = @"";
  }
  return self;
}
static Geo* defaultGeoInstance = nil;
+ (void) initialize {
  if (self == [Geo class]) {
    defaultGeoInstance = [[Geo alloc] init];
  }
}
+ (Geo*) defaultInstance {
  return defaultGeoInstance;
}
- (Geo*) defaultInstance {
  return defaultGeoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLat) {
    [output writeDouble:1 value:self.lat];
  }
  if (self.hasLon) {
    [output writeDouble:2 value:self.lon];
  }
  if (self.hasIp) {
    [output writeString:3 value:self.ip];
  }
  if (self.hasTz) {
    [output writeString:4 value:self.tz];
  }
  if (self.hasLocale) {
    [output writeString:5 value:self.locale];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasLat) {
    size += computeDoubleSize(1, self.lat);
  }
  if (self.hasLon) {
    size += computeDoubleSize(2, self.lon);
  }
  if (self.hasIp) {
    size += computeStringSize(3, self.ip);
  }
  if (self.hasTz) {
    size += computeStringSize(4, self.tz);
  }
  if (self.hasLocale) {
    size += computeStringSize(5, self.locale);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Geo*) parseFromData:(NSData*) data {
  return (Geo*)[[[Geo builder] mergeFromData:data] build];
}
+ (Geo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Geo*)[[[Geo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Geo*) parseFromInputStream:(NSInputStream*) input {
  return (Geo*)[[[Geo builder] mergeFromInputStream:input] build];
}
+ (Geo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Geo*)[[[Geo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Geo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Geo*)[[[Geo builder] mergeFromCodedInputStream:input] build];
}
+ (Geo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Geo*)[[[Geo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Geo_Builder*) builder {
  return [[[Geo_Builder alloc] init] autorelease];
}
+ (Geo_Builder*) builderWithPrototype:(Geo*) prototype {
  return [[Geo builder] mergeFrom:prototype];
}
- (Geo_Builder*) builder {
  return [Geo builder];
}
@end

@interface Geo_Builder()
@property (retain) Geo* result;
@end

@implementation Geo_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Geo alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Geo_Builder*) clear {
  self.result = [[[Geo alloc] init] autorelease];
  return self;
}
- (Geo_Builder*) clone {
  return [Geo builderWithPrototype:result];
}
- (Geo*) defaultInstance {
  return [Geo defaultInstance];
}
- (Geo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Geo*) buildPartial {
  Geo* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Geo_Builder*) mergeFrom:(Geo*) other {
  if (other == [Geo defaultInstance]) {
    return self;
  }
  if (other.hasLat) {
    [self setLat:other.lat];
  }
  if (other.hasLon) {
    [self setLon:other.lon];
  }
  if (other.hasIp) {
    [self setIp:other.ip];
  }
  if (other.hasTz) {
    [self setTz:other.tz];
  }
  if (other.hasLocale) {
    [self setLocale:other.locale];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Geo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Geo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 9: {
        [self setLat:[input readDouble]];
        break;
      }
      case 17: {
        [self setLon:[input readDouble]];
        break;
      }
      case 26: {
        [self setIp:[input readString]];
        break;
      }
      case 34: {
        [self setTz:[input readString]];
        break;
      }
      case 42: {
        [self setLocale:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasLat {
  return result.hasLat;
}
- (Float64) lat {
  return result.lat;
}
- (Geo_Builder*) setLat:(Float64) value {
  result.hasLat = YES;
  result.lat = value;
  return self;
}
- (Geo_Builder*) clearLat {
  result.hasLat = NO;
  result.lat = 0;
  return self;
}
- (BOOL) hasLon {
  return result.hasLon;
}
- (Float64) lon {
  return result.lon;
}
- (Geo_Builder*) setLon:(Float64) value {
  result.hasLon = YES;
  result.lon = value;
  return self;
}
- (Geo_Builder*) clearLon {
  result.hasLon = NO;
  result.lon = 0;
  return self;
}
- (BOOL) hasIp {
  return result.hasIp;
}
- (NSString*) ip {
  return result.ip;
}
- (Geo_Builder*) setIp:(NSString*) value {
  result.hasIp = YES;
  result.ip = value;
  return self;
}
- (Geo_Builder*) clearIp {
  result.hasIp = NO;
  result.ip = @"";
  return self;
}
- (BOOL) hasTz {
  return result.hasTz;
}
- (NSString*) tz {
  return result.tz;
}
- (Geo_Builder*) setTz:(NSString*) value {
  result.hasTz = YES;
  result.tz = value;
  return self;
}
- (Geo_Builder*) clearTz {
  result.hasTz = NO;
  result.tz = @"";
  return self;
}
- (BOOL) hasLocale {
  return result.hasLocale;
}
- (NSString*) locale {
  return result.locale;
}
- (Geo_Builder*) setLocale:(NSString*) value {
  result.hasLocale = YES;
  result.locale = value;
  return self;
}
- (Geo_Builder*) clearLocale {
  result.hasLocale = NO;
  result.locale = @"";
  return self;
}
@end

@interface Event ()
@property (retain) NSString* eventId;
@property EVENT_TYPE eventType;
@property (retain) NSString* name;
@property int64_t start;
@property int64_t end;
@property int64_t duration;
@property (retain) NSString* json;
@end

@implementation Event

- (BOOL) hasEventId {
  return !!hasEventId_;
}
- (void) setHasEventId:(BOOL) value {
  hasEventId_ = !!value;
}
@synthesize eventId;
- (BOOL) hasEventType {
  return !!hasEventType_;
}
- (void) setHasEventType:(BOOL) value {
  hasEventType_ = !!value;
}
@synthesize eventType;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasStart {
  return !!hasStart_;
}
- (void) setHasStart:(BOOL) value {
  hasStart_ = !!value;
}
@synthesize start;
- (BOOL) hasEnd {
  return !!hasEnd_;
}
- (void) setHasEnd:(BOOL) value {
  hasEnd_ = !!value;
}
@synthesize end;
- (BOOL) hasDuration {
  return !!hasDuration_;
}
- (void) setHasDuration:(BOOL) value {
  hasDuration_ = !!value;
}
@synthesize duration;
- (BOOL) hasJson {
  return !!hasJson_;
}
- (void) setHasJson:(BOOL) value {
  hasJson_ = !!value;
}
@synthesize json;
- (void) dealloc {
  self.eventId = nil;
  self.name = nil;
  self.json = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.eventId = @"";
    self.eventType = EVENT_TYPELoadScr;
    self.name = @"";
    self.start = 0L;
    self.end = 0L;
    self.duration = 0L;
    self.json = @"";
  }
  return self;
}
static Event* defaultEventInstance = nil;
+ (void) initialize {
  if (self == [Event class]) {
    defaultEventInstance = [[Event alloc] init];
  }
}
+ (Event*) defaultInstance {
  return defaultEventInstance;
}
- (Event*) defaultInstance {
  return defaultEventInstance;
}
- (BOOL) isInitialized {
  if (!self.hasEventId) {
    return NO;
  }
  if (!self.hasEventType) {
    return NO;
  }
  if (!self.hasStart) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasEventId) {
    [output writeString:1 value:self.eventId];
  }
  if (self.hasEventType) {
    [output writeEnum:2 value:self.eventType];
  }
  if (self.hasName) {
    [output writeString:3 value:self.name];
  }
  if (self.hasStart) {
    [output writeInt64:4 value:self.start];
  }
  if (self.hasEnd) {
    [output writeInt64:5 value:self.end];
  }
  if (self.hasDuration) {
    [output writeInt64:6 value:self.duration];
  }
  if (self.hasJson) {
    [output writeString:7 value:self.json];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasEventId) {
    size += computeStringSize(1, self.eventId);
  }
  if (self.hasEventType) {
    size += computeEnumSize(2, self.eventType);
  }
  if (self.hasName) {
    size += computeStringSize(3, self.name);
  }
  if (self.hasStart) {
    size += computeInt64Size(4, self.start);
  }
  if (self.hasEnd) {
    size += computeInt64Size(5, self.end);
  }
  if (self.hasDuration) {
    size += computeInt64Size(6, self.duration);
  }
  if (self.hasJson) {
    size += computeStringSize(7, self.json);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Event*) parseFromData:(NSData*) data {
  return (Event*)[[[Event builder] mergeFromData:data] build];
}
+ (Event*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Event*)[[[Event builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Event*) parseFromInputStream:(NSInputStream*) input {
  return (Event*)[[[Event builder] mergeFromInputStream:input] build];
}
+ (Event*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Event*)[[[Event builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Event*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Event*)[[[Event builder] mergeFromCodedInputStream:input] build];
}
+ (Event*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Event*)[[[Event builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Event_Builder*) builder {
  return [[[Event_Builder alloc] init] autorelease];
}
+ (Event_Builder*) builderWithPrototype:(Event*) prototype {
  return [[Event builder] mergeFrom:prototype];
}
- (Event_Builder*) builder {
  return [Event builder];
}
@end

@interface Event_Builder()
@property (retain) Event* result;
@end

@implementation Event_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Event alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Event_Builder*) clear {
  self.result = [[[Event alloc] init] autorelease];
  return self;
}
- (Event_Builder*) clone {
  return [Event builderWithPrototype:result];
}
- (Event*) defaultInstance {
  return [Event defaultInstance];
}
- (Event*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Event*) buildPartial {
  Event* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Event_Builder*) mergeFrom:(Event*) other {
  if (other == [Event defaultInstance]) {
    return self;
  }
  if (other.hasEventId) {
    [self setEventId:other.eventId];
  }
  if (other.hasEventType) {
    [self setEventType:other.eventType];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasStart) {
    [self setStart:other.start];
  }
  if (other.hasEnd) {
    [self setEnd:other.end];
  }
  if (other.hasDuration) {
    [self setDuration:other.duration];
  }
  if (other.hasJson) {
    [self setJson:other.json];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Event_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Event_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setEventId:[input readString]];
        break;
      }
      case 16: {
        int32_t value = [input readEnum];
        if (EVENT_TYPEIsValidValue(value)) {
          [self setEventType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 26: {
        [self setName:[input readString]];
        break;
      }
      case 32: {
        [self setStart:[input readInt64]];
        break;
      }
      case 40: {
        [self setEnd:[input readInt64]];
        break;
      }
      case 48: {
        [self setDuration:[input readInt64]];
        break;
      }
      case 58: {
        [self setJson:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasEventId {
  return result.hasEventId;
}
- (NSString*) eventId {
  return result.eventId;
}
- (Event_Builder*) setEventId:(NSString*) value {
  result.hasEventId = YES;
  result.eventId = value;
  return self;
}
- (Event_Builder*) clearEventId {
  result.hasEventId = NO;
  result.eventId = @"";
  return self;
}
- (BOOL) hasEventType {
  return result.hasEventType;
}
- (EVENT_TYPE) eventType {
  return result.eventType;
}
- (Event_Builder*) setEventType:(EVENT_TYPE) value {
  result.hasEventType = YES;
  result.eventType = value;
  return self;
}
- (Event_Builder*) clearEventType {
  result.hasEventType = NO;
  result.eventType = EVENT_TYPELoadScr;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (Event_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (Event_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasStart {
  return result.hasStart;
}
- (int64_t) start {
  return result.start;
}
- (Event_Builder*) setStart:(int64_t) value {
  result.hasStart = YES;
  result.start = value;
  return self;
}
- (Event_Builder*) clearStart {
  result.hasStart = NO;
  result.start = 0L;
  return self;
}
- (BOOL) hasEnd {
  return result.hasEnd;
}
- (int64_t) end {
  return result.end;
}
- (Event_Builder*) setEnd:(int64_t) value {
  result.hasEnd = YES;
  result.end = value;
  return self;
}
- (Event_Builder*) clearEnd {
  result.hasEnd = NO;
  result.end = 0L;
  return self;
}
- (BOOL) hasDuration {
  return result.hasDuration;
}
- (int64_t) duration {
  return result.duration;
}
- (Event_Builder*) setDuration:(int64_t) value {
  result.hasDuration = YES;
  result.duration = value;
  return self;
}
- (Event_Builder*) clearDuration {
  result.hasDuration = NO;
  result.duration = 0L;
  return self;
}
- (BOOL) hasJson {
  return result.hasJson;
}
- (NSString*) json {
  return result.json;
}
- (Event_Builder*) setJson:(NSString*) value {
  result.hasJson = YES;
  result.json = value;
  return self;
}
- (Event_Builder*) clearJson {
  result.hasJson = NO;
  result.json = @"";
  return self;
}
@end

@interface User ()
@property (retain) NSString* medeemId;
@property (retain) NSMutableArray* mutableNetworksList;
@property (retain) NSString* primaryEmail;
@property (retain) NSMutableArray* mutableOtherEmailsList;
@property (retain) NSMutableArray* mutableDeviceIdList;
@property (retain) NSString* gender;
@property AgeGroup age;
@end

@implementation User

- (BOOL) hasMedeemId {
  return !!hasMedeemId_;
}
- (void) setHasMedeemId:(BOOL) value {
  hasMedeemId_ = !!value;
}
@synthesize medeemId;
@synthesize mutableNetworksList;
- (BOOL) hasPrimaryEmail {
  return !!hasPrimaryEmail_;
}
- (void) setHasPrimaryEmail:(BOOL) value {
  hasPrimaryEmail_ = !!value;
}
@synthesize primaryEmail;
@synthesize mutableOtherEmailsList;
@synthesize mutableDeviceIdList;
- (BOOL) hasGender {
  return !!hasGender_;
}
- (void) setHasGender:(BOOL) value {
  hasGender_ = !!value;
}
@synthesize gender;
- (BOOL) hasAge {
  return !!hasAge_;
}
- (void) setHasAge:(BOOL) value {
  hasAge_ = !!value;
}
@synthesize age;
- (void) dealloc {
  self.medeemId = nil;
  self.mutableNetworksList = nil;
  self.primaryEmail = nil;
  self.mutableOtherEmailsList = nil;
  self.mutableDeviceIdList = nil;
  self.gender = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.medeemId = @"";
    self.primaryEmail = @"";
    self.gender = @"";
    self.age = AgeGroup1824;
  }
  return self;
}
static User* defaultUserInstance = nil;
+ (void) initialize {
  if (self == [User class]) {
    defaultUserInstance = [[User alloc] init];
  }
}
+ (User*) defaultInstance {
  return defaultUserInstance;
}
- (User*) defaultInstance {
  return defaultUserInstance;
}
- (NSArray*) networksList {
  return mutableNetworksList;
}
- (Network*) networksAtIndex:(int32_t) index {
  id value = [mutableNetworksList objectAtIndex:index];
  return value;
}
- (NSArray*) otherEmailsList {
  return mutableOtherEmailsList;
}
- (NSString*) otherEmailsAtIndex:(int32_t) index {
  id value = [mutableOtherEmailsList objectAtIndex:index];
  return value;
}
- (NSArray*) deviceIdList {
  return mutableDeviceIdList;
}
- (NSString*) deviceIdAtIndex:(int32_t) index {
  id value = [mutableDeviceIdList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (Network* element in self.networksList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMedeemId) {
    [output writeString:1 value:self.medeemId];
  }
  for (Network* element in self.networksList) {
    [output writeMessage:2 value:element];
  }
  if (self.hasPrimaryEmail) {
    [output writeString:3 value:self.primaryEmail];
  }
  for (NSString* element in self.mutableOtherEmailsList) {
    [output writeString:4 value:element];
  }
  for (NSString* element in self.mutableDeviceIdList) {
    [output writeString:5 value:element];
  }
  if (self.hasGender) {
    [output writeString:6 value:self.gender];
  }
  if (self.hasAge) {
    [output writeEnum:7 value:self.age];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasMedeemId) {
    size += computeStringSize(1, self.medeemId);
  }
  for (Network* element in self.networksList) {
    size += computeMessageSize(2, element);
  }
  if (self.hasPrimaryEmail) {
    size += computeStringSize(3, self.primaryEmail);
  }
  {
    int32_t dataSize = 0;
    for (NSString* element in self.mutableOtherEmailsList) {
      dataSize += computeStringSizeNoTag(element);
    }
    size += dataSize;
    size += 1 * self.mutableOtherEmailsList.count;
  }
  {
    int32_t dataSize = 0;
    for (NSString* element in self.mutableDeviceIdList) {
      dataSize += computeStringSizeNoTag(element);
    }
    size += dataSize;
    size += 1 * self.mutableDeviceIdList.count;
  }
  if (self.hasGender) {
    size += computeStringSize(6, self.gender);
  }
  if (self.hasAge) {
    size += computeEnumSize(7, self.age);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (User*) parseFromData:(NSData*) data {
  return (User*)[[[User builder] mergeFromData:data] build];
}
+ (User*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (User*)[[[User builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (User*) parseFromInputStream:(NSInputStream*) input {
  return (User*)[[[User builder] mergeFromInputStream:input] build];
}
+ (User*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (User*)[[[User builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (User*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (User*)[[[User builder] mergeFromCodedInputStream:input] build];
}
+ (User*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (User*)[[[User builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (User_Builder*) builder {
  return [[[User_Builder alloc] init] autorelease];
}
+ (User_Builder*) builderWithPrototype:(User*) prototype {
  return [[User builder] mergeFrom:prototype];
}
- (User_Builder*) builder {
  return [User builder];
}
@end

@interface User_Builder()
@property (retain) User* result;
@end

@implementation User_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[User alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (User_Builder*) clear {
  self.result = [[[User alloc] init] autorelease];
  return self;
}
- (User_Builder*) clone {
  return [User builderWithPrototype:result];
}
- (User*) defaultInstance {
  return [User defaultInstance];
}
- (User*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (User*) buildPartial {
  User* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (User_Builder*) mergeFrom:(User*) other {
  if (other == [User defaultInstance]) {
    return self;
  }
  if (other.hasMedeemId) {
    [self setMedeemId:other.medeemId];
  }
  if (other.mutableNetworksList.count > 0) {
    if (result.mutableNetworksList == nil) {
      result.mutableNetworksList = [NSMutableArray array];
    }
    [result.mutableNetworksList addObjectsFromArray:other.mutableNetworksList];
  }
  if (other.hasPrimaryEmail) {
    [self setPrimaryEmail:other.primaryEmail];
  }
  if (other.mutableOtherEmailsList.count > 0) {
    if (result.mutableOtherEmailsList == nil) {
      result.mutableOtherEmailsList = [NSMutableArray array];
    }
    [result.mutableOtherEmailsList addObjectsFromArray:other.mutableOtherEmailsList];
  }
  if (other.mutableDeviceIdList.count > 0) {
    if (result.mutableDeviceIdList == nil) {
      result.mutableDeviceIdList = [NSMutableArray array];
    }
    [result.mutableDeviceIdList addObjectsFromArray:other.mutableDeviceIdList];
  }
  if (other.hasGender) {
    [self setGender:other.gender];
  }
  if (other.hasAge) {
    [self setAge:other.age];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (User_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (User_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setMedeemId:[input readString]];
        break;
      }
      case 18: {
        Network_Builder* subBuilder = [Network builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addNetworks:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        [self setPrimaryEmail:[input readString]];
        break;
      }
      case 34: {
        [self addOtherEmails:[input readString]];
        break;
      }
      case 42: {
        [self addDeviceId:[input readString]];
        break;
      }
      case 50: {
        [self setGender:[input readString]];
        break;
      }
      case 56: {
        int32_t value = [input readEnum];
        if (AgeGroupIsValidValue(value)) {
          [self setAge:value];
        } else {
          [unknownFields mergeVarintField:7 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasMedeemId {
  return result.hasMedeemId;
}
- (NSString*) medeemId {
  return result.medeemId;
}
- (User_Builder*) setMedeemId:(NSString*) value {
  result.hasMedeemId = YES;
  result.medeemId = value;
  return self;
}
- (User_Builder*) clearMedeemId {
  result.hasMedeemId = NO;
  result.medeemId = @"";
  return self;
}
- (NSArray*) networksList {
  if (result.mutableNetworksList == nil) { return [NSArray array]; }
  return result.mutableNetworksList;
}
- (Network*) networksAtIndex:(int32_t) index {
  return [result networksAtIndex:index];
}
- (User_Builder*) replaceNetworksAtIndex:(int32_t) index with:(Network*) value {
  [result.mutableNetworksList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (User_Builder*) addAllNetworks:(NSArray*) values {
  if (result.mutableNetworksList == nil) {
    result.mutableNetworksList = [NSMutableArray array];
  }
  [result.mutableNetworksList addObjectsFromArray:values];
  return self;
}
- (User_Builder*) clearNetworksList {
  result.mutableNetworksList = nil;
  return self;
}
- (User_Builder*) addNetworks:(Network*) value {
  if (result.mutableNetworksList == nil) {
    result.mutableNetworksList = [NSMutableArray array];
  }
  [result.mutableNetworksList addObject:value];
  return self;
}
- (BOOL) hasPrimaryEmail {
  return result.hasPrimaryEmail;
}
- (NSString*) primaryEmail {
  return result.primaryEmail;
}
- (User_Builder*) setPrimaryEmail:(NSString*) value {
  result.hasPrimaryEmail = YES;
  result.primaryEmail = value;
  return self;
}
- (User_Builder*) clearPrimaryEmail {
  result.hasPrimaryEmail = NO;
  result.primaryEmail = @"";
  return self;
}
- (NSArray*) otherEmailsList {
  if (result.mutableOtherEmailsList == nil) {
    return [NSArray array];
  }
  return result.mutableOtherEmailsList;
}
- (NSString*) otherEmailsAtIndex:(int32_t) index {
  return [result otherEmailsAtIndex:index];
}
- (User_Builder*) replaceOtherEmailsAtIndex:(int32_t) index with:(NSString*) value {
  [result.mutableOtherEmailsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (User_Builder*) addOtherEmails:(NSString*) value {
  if (result.mutableOtherEmailsList == nil) {
    result.mutableOtherEmailsList = [NSMutableArray array];
  }
  [result.mutableOtherEmailsList addObject:value];
  return self;
}
- (User_Builder*) addAllOtherEmails:(NSArray*) values {
  if (result.mutableOtherEmailsList == nil) {
    result.mutableOtherEmailsList = [NSMutableArray array];
  }
  [result.mutableOtherEmailsList addObjectsFromArray:values];
  return self;
}
- (User_Builder*) clearOtherEmailsList {
  result.mutableOtherEmailsList = nil;
  return self;
}
- (NSArray*) deviceIdList {
  if (result.mutableDeviceIdList == nil) {
    return [NSArray array];
  }
  return result.mutableDeviceIdList;
}
- (NSString*) deviceIdAtIndex:(int32_t) index {
  return [result deviceIdAtIndex:index];
}
- (User_Builder*) replaceDeviceIdAtIndex:(int32_t) index with:(NSString*) value {
  [result.mutableDeviceIdList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (User_Builder*) addDeviceId:(NSString*) value {
  if (result.mutableDeviceIdList == nil) {
    result.mutableDeviceIdList = [NSMutableArray array];
  }
  [result.mutableDeviceIdList addObject:value];
  return self;
}
- (User_Builder*) addAllDeviceId:(NSArray*) values {
  if (result.mutableDeviceIdList == nil) {
    result.mutableDeviceIdList = [NSMutableArray array];
  }
  [result.mutableDeviceIdList addObjectsFromArray:values];
  return self;
}
- (User_Builder*) clearDeviceIdList {
  result.mutableDeviceIdList = nil;
  return self;
}
- (BOOL) hasGender {
  return result.hasGender;
}
- (NSString*) gender {
  return result.gender;
}
- (User_Builder*) setGender:(NSString*) value {
  result.hasGender = YES;
  result.gender = value;
  return self;
}
- (User_Builder*) clearGender {
  result.hasGender = NO;
  result.gender = @"";
  return self;
}
- (BOOL) hasAge {
  return result.hasAge;
}
- (AgeGroup) age {
  return result.age;
}
- (User_Builder*) setAge:(AgeGroup) value {
  result.hasAge = YES;
  result.age = value;
  return self;
}
- (User_Builder*) clearAge {
  result.hasAge = NO;
  result.age = AgeGroup1824;
  return self;
}
@end

@interface App ()
@property (retain) NSString* appKey;
@property (retain) NSMutableArray* mutableChannelsList;
@property (retain) NSMutableArray* mutableAgeList;
@end

@implementation App

- (BOOL) hasAppKey {
  return !!hasAppKey_;
}
- (void) setHasAppKey:(BOOL) value {
  hasAppKey_ = !!value;
}
@synthesize appKey;
@synthesize mutableChannelsList;
@synthesize mutableAgeList;
- (void) dealloc {
  self.appKey = nil;
  self.mutableChannelsList = nil;
  self.mutableAgeList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.appKey = @"";
  }
  return self;
}
static App* defaultAppInstance = nil;
+ (void) initialize {
  if (self == [App class]) {
    defaultAppInstance = [[App alloc] init];
  }
}
+ (App*) defaultInstance {
  return defaultAppInstance;
}
- (App*) defaultInstance {
  return defaultAppInstance;
}
- (NSArray*) channelsList {
  return mutableChannelsList;
}
- (NSString*) channelsAtIndex:(int32_t) index {
  id value = [mutableChannelsList objectAtIndex:index];
  return value;
}
- (NSArray*) ageList {
  return mutableAgeList;
}
- (AgeGroup) ageAtIndex:(int32_t) index {
  NSNumber* value = [mutableAgeList objectAtIndex:index];
  return [value intValue];
}
- (BOOL) isInitialized {
  if (!self.hasAppKey) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAppKey) {
    [output writeString:1 value:self.appKey];
  }
  for (NSString* element in self.mutableChannelsList) {
    [output writeString:2 value:element];
  }
  for (NSNumber* element in self.ageList) {
    [output writeEnum:3 value:element.intValue];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasAppKey) {
    size += computeStringSize(1, self.appKey);
  }
  {
    int32_t dataSize = 0;
    for (NSString* element in self.mutableChannelsList) {
      dataSize += computeStringSizeNoTag(element);
    }
    size += dataSize;
    size += 1 * self.mutableChannelsList.count;
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* element in self.ageList) {
      dataSize += computeEnumSizeNoTag(element.intValue);
    }
    size += dataSize;
    size += 1 * self.ageList.count;
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (App*) parseFromData:(NSData*) data {
  return (App*)[[[App builder] mergeFromData:data] build];
}
+ (App*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (App*)[[[App builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (App*) parseFromInputStream:(NSInputStream*) input {
  return (App*)[[[App builder] mergeFromInputStream:input] build];
}
+ (App*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (App*)[[[App builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (App*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (App*)[[[App builder] mergeFromCodedInputStream:input] build];
}
+ (App*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (App*)[[[App builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (App_Builder*) builder {
  return [[[App_Builder alloc] init] autorelease];
}
+ (App_Builder*) builderWithPrototype:(App*) prototype {
  return [[App builder] mergeFrom:prototype];
}
- (App_Builder*) builder {
  return [App builder];
}
@end

@interface App_Builder()
@property (retain) App* result;
@end

@implementation App_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[App alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (App_Builder*) clear {
  self.result = [[[App alloc] init] autorelease];
  return self;
}
- (App_Builder*) clone {
  return [App builderWithPrototype:result];
}
- (App*) defaultInstance {
  return [App defaultInstance];
}
- (App*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (App*) buildPartial {
  App* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (App_Builder*) mergeFrom:(App*) other {
  if (other == [App defaultInstance]) {
    return self;
  }
  if (other.hasAppKey) {
    [self setAppKey:other.appKey];
  }
  if (other.mutableChannelsList.count > 0) {
    if (result.mutableChannelsList == nil) {
      result.mutableChannelsList = [NSMutableArray array];
    }
    [result.mutableChannelsList addObjectsFromArray:other.mutableChannelsList];
  }
  if (other.mutableAgeList.count > 0) {
    if (result.mutableAgeList == nil) {
      result.mutableAgeList = [NSMutableArray array];
    }
    [result.mutableAgeList addObjectsFromArray:other.mutableAgeList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (App_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (App_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setAppKey:[input readString]];
        break;
      }
      case 18: {
        [self addChannels:[input readString]];
        break;
      }
      case 24: {
        int32_t value = [input readEnum];
        if (AgeGroupIsValidValue(value)) {
          [self addAge:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasAppKey {
  return result.hasAppKey;
}
- (NSString*) appKey {
  return result.appKey;
}
- (App_Builder*) setAppKey:(NSString*) value {
  result.hasAppKey = YES;
  result.appKey = value;
  return self;
}
- (App_Builder*) clearAppKey {
  result.hasAppKey = NO;
  result.appKey = @"";
  return self;
}
- (NSArray*) channelsList {
  if (result.mutableChannelsList == nil) {
    return [NSArray array];
  }
  return result.mutableChannelsList;
}
- (NSString*) channelsAtIndex:(int32_t) index {
  return [result channelsAtIndex:index];
}
- (App_Builder*) replaceChannelsAtIndex:(int32_t) index with:(NSString*) value {
  [result.mutableChannelsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (App_Builder*) addChannels:(NSString*) value {
  if (result.mutableChannelsList == nil) {
    result.mutableChannelsList = [NSMutableArray array];
  }
  [result.mutableChannelsList addObject:value];
  return self;
}
- (App_Builder*) addAllChannels:(NSArray*) values {
  if (result.mutableChannelsList == nil) {
    result.mutableChannelsList = [NSMutableArray array];
  }
  [result.mutableChannelsList addObjectsFromArray:values];
  return self;
}
- (App_Builder*) clearChannelsList {
  result.mutableChannelsList = nil;
  return self;
}
- (NSArray*) ageList {
  return result.mutableAgeList;
}
- (AgeGroup) ageAtIndex:(int32_t) index {
  return [result ageAtIndex:index];
}
- (App_Builder*) replaceAgeAtIndex:(int32_t) index with:(AgeGroup) value {
  [result.mutableAgeList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (App_Builder*) addAge:(AgeGroup) value {
  if (result.mutableAgeList == nil) {
    result.mutableAgeList = [NSMutableArray array];
  }
  [result.mutableAgeList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (App_Builder*) addAllAge:(NSArray*) values {
  if (result.mutableAgeList == nil) {
    result.mutableAgeList = [NSMutableArray array];
  }
  [result.mutableAgeList addObjectsFromArray:values];
  return self;
}
- (App_Builder*) clearAgeList {
  result.mutableAgeList = nil;
  return self;
}
@end

@interface Device ()
@property (retain) NSString* deviceId;
@property DeviceOS os;
@property (retain) NSString* osVersion;
@property DeviceType type;
@property (retain) NSString* carrier;
@property (retain) NSString* make;
@property (retain) NSString* model;
@property BOOL retina;
@property int32_t density;
@property int32_t w;
@property int32_t h;
@end

@implementation Device

- (BOOL) hasDeviceId {
  return !!hasDeviceId_;
}
- (void) setHasDeviceId:(BOOL) value {
  hasDeviceId_ = !!value;
}
@synthesize deviceId;
- (BOOL) hasOs {
  return !!hasOs_;
}
- (void) setHasOs:(BOOL) value {
  hasOs_ = !!value;
}
@synthesize os;
- (BOOL) hasOsVersion {
  return !!hasOsVersion_;
}
- (void) setHasOsVersion:(BOOL) value {
  hasOsVersion_ = !!value;
}
@synthesize osVersion;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value {
  hasType_ = !!value;
}
@synthesize type;
- (BOOL) hasCarrier {
  return !!hasCarrier_;
}
- (void) setHasCarrier:(BOOL) value {
  hasCarrier_ = !!value;
}
@synthesize carrier;
- (BOOL) hasMake {
  return !!hasMake_;
}
- (void) setHasMake:(BOOL) value {
  hasMake_ = !!value;
}
@synthesize make;
- (BOOL) hasModel {
  return !!hasModel_;
}
- (void) setHasModel:(BOOL) value {
  hasModel_ = !!value;
}
@synthesize model;
- (BOOL) hasRetina {
  return !!hasRetina_;
}
- (void) setHasRetina:(BOOL) value {
  hasRetina_ = !!value;
}
- (BOOL) retina {
  return !!retina_;
}
- (void) setRetina:(BOOL) value {
  retina_ = !!value;
}
- (BOOL) hasDensity {
  return !!hasDensity_;
}
- (void) setHasDensity:(BOOL) value {
  hasDensity_ = !!value;
}
@synthesize density;
- (BOOL) hasW {
  return !!hasW_;
}
- (void) setHasW:(BOOL) value {
  hasW_ = !!value;
}
@synthesize w;
- (BOOL) hasH {
  return !!hasH_;
}
- (void) setHasH:(BOOL) value {
  hasH_ = !!value;
}
@synthesize h;
- (void) dealloc {
  self.deviceId = nil;
  self.osVersion = nil;
  self.carrier = nil;
  self.make = nil;
  self.model = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.deviceId = @"";
    self.os = DeviceOSIos;
    self.osVersion = @"";
    self.type = DeviceTypePhone;
    self.carrier = @"";
    self.make = @"";
    self.model = @"";
    self.retina = NO;
    self.density = 0;
    self.w = 0;
    self.h = 0;
  }
  return self;
}
static Device* defaultDeviceInstance = nil;
+ (void) initialize {
  if (self == [Device class]) {
    defaultDeviceInstance = [[Device alloc] init];
  }
}
+ (Device*) defaultInstance {
  return defaultDeviceInstance;
}
- (Device*) defaultInstance {
  return defaultDeviceInstance;
}
- (BOOL) isInitialized {
  if (!self.hasDeviceId) {
    return NO;
  }
  if (!self.hasOs) {
    return NO;
  }
  if (!self.hasOsVersion) {
    return NO;
  }
  if (!self.hasType) {
    return NO;
  }
  if (!self.hasW) {
    return NO;
  }
  if (!self.hasH) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDeviceId) {
    [output writeString:1 value:self.deviceId];
  }
  if (self.hasOs) {
    [output writeEnum:2 value:self.os];
  }
  if (self.hasOsVersion) {
    [output writeString:3 value:self.osVersion];
  }
  if (self.hasType) {
    [output writeEnum:4 value:self.type];
  }
  if (self.hasCarrier) {
    [output writeString:5 value:self.carrier];
  }
  if (self.hasMake) {
    [output writeString:6 value:self.make];
  }
  if (self.hasModel) {
    [output writeString:7 value:self.model];
  }
  if (self.hasRetina) {
    [output writeBool:8 value:self.retina];
  }
  if (self.hasDensity) {
    [output writeInt32:9 value:self.density];
  }
  if (self.hasW) {
    [output writeInt32:10 value:self.w];
  }
  if (self.hasH) {
    [output writeInt32:11 value:self.h];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasDeviceId) {
    size += computeStringSize(1, self.deviceId);
  }
  if (self.hasOs) {
    size += computeEnumSize(2, self.os);
  }
  if (self.hasOsVersion) {
    size += computeStringSize(3, self.osVersion);
  }
  if (self.hasType) {
    size += computeEnumSize(4, self.type);
  }
  if (self.hasCarrier) {
    size += computeStringSize(5, self.carrier);
  }
  if (self.hasMake) {
    size += computeStringSize(6, self.make);
  }
  if (self.hasModel) {
    size += computeStringSize(7, self.model);
  }
  if (self.hasRetina) {
    size += computeBoolSize(8, self.retina);
  }
  if (self.hasDensity) {
    size += computeInt32Size(9, self.density);
  }
  if (self.hasW) {
    size += computeInt32Size(10, self.w);
  }
  if (self.hasH) {
    size += computeInt32Size(11, self.h);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Device*) parseFromData:(NSData*) data {
  return (Device*)[[[Device builder] mergeFromData:data] build];
}
+ (Device*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Device*)[[[Device builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Device*) parseFromInputStream:(NSInputStream*) input {
  return (Device*)[[[Device builder] mergeFromInputStream:input] build];
}
+ (Device*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Device*)[[[Device builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Device*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Device*)[[[Device builder] mergeFromCodedInputStream:input] build];
}
+ (Device*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Device*)[[[Device builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Device_Builder*) builder {
  return [[[Device_Builder alloc] init] autorelease];
}
+ (Device_Builder*) builderWithPrototype:(Device*) prototype {
  return [[Device builder] mergeFrom:prototype];
}
- (Device_Builder*) builder {
  return [Device builder];
}
@end

@interface Device_Builder()
@property (retain) Device* result;
@end

@implementation Device_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Device alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Device_Builder*) clear {
  self.result = [[[Device alloc] init] autorelease];
  return self;
}
- (Device_Builder*) clone {
  return [Device builderWithPrototype:result];
}
- (Device*) defaultInstance {
  return [Device defaultInstance];
}
- (Device*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Device*) buildPartial {
  Device* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Device_Builder*) mergeFrom:(Device*) other {
  if (other == [Device defaultInstance]) {
    return self;
  }
  if (other.hasDeviceId) {
    [self setDeviceId:other.deviceId];
  }
  if (other.hasOs) {
    [self setOs:other.os];
  }
  if (other.hasOsVersion) {
    [self setOsVersion:other.osVersion];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasCarrier) {
    [self setCarrier:other.carrier];
  }
  if (other.hasMake) {
    [self setMake:other.make];
  }
  if (other.hasModel) {
    [self setModel:other.model];
  }
  if (other.hasRetina) {
    [self setRetina:other.retina];
  }
  if (other.hasDensity) {
    [self setDensity:other.density];
  }
  if (other.hasW) {
    [self setW:other.w];
  }
  if (other.hasH) {
    [self setH:other.h];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Device_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Device_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setDeviceId:[input readString]];
        break;
      }
      case 16: {
        int32_t value = [input readEnum];
        if (DeviceOSIsValidValue(value)) {
          [self setOs:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 26: {
        [self setOsVersion:[input readString]];
        break;
      }
      case 32: {
        int32_t value = [input readEnum];
        if (DeviceTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
      case 42: {
        [self setCarrier:[input readString]];
        break;
      }
      case 50: {
        [self setMake:[input readString]];
        break;
      }
      case 58: {
        [self setModel:[input readString]];
        break;
      }
      case 64: {
        [self setRetina:[input readBool]];
        break;
      }
      case 72: {
        [self setDensity:[input readInt32]];
        break;
      }
      case 80: {
        [self setW:[input readInt32]];
        break;
      }
      case 88: {
        [self setH:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasDeviceId {
  return result.hasDeviceId;
}
- (NSString*) deviceId {
  return result.deviceId;
}
- (Device_Builder*) setDeviceId:(NSString*) value {
  result.hasDeviceId = YES;
  result.deviceId = value;
  return self;
}
- (Device_Builder*) clearDeviceId {
  result.hasDeviceId = NO;
  result.deviceId = @"";
  return self;
}
- (BOOL) hasOs {
  return result.hasOs;
}
- (DeviceOS) os {
  return result.os;
}
- (Device_Builder*) setOs:(DeviceOS) value {
  result.hasOs = YES;
  result.os = value;
  return self;
}
- (Device_Builder*) clearOs {
  result.hasOs = NO;
  result.os = DeviceOSIos;
  return self;
}
- (BOOL) hasOsVersion {
  return result.hasOsVersion;
}
- (NSString*) osVersion {
  return result.osVersion;
}
- (Device_Builder*) setOsVersion:(NSString*) value {
  result.hasOsVersion = YES;
  result.osVersion = value;
  return self;
}
- (Device_Builder*) clearOsVersion {
  result.hasOsVersion = NO;
  result.osVersion = @"";
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (DeviceType) type {
  return result.type;
}
- (Device_Builder*) setType:(DeviceType) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (Device_Builder*) clearType {
  result.hasType = NO;
  result.type = DeviceTypePhone;
  return self;
}
- (BOOL) hasCarrier {
  return result.hasCarrier;
}
- (NSString*) carrier {
  return result.carrier;
}
- (Device_Builder*) setCarrier:(NSString*) value {
  result.hasCarrier = YES;
  result.carrier = value;
  return self;
}
- (Device_Builder*) clearCarrier {
  result.hasCarrier = NO;
  result.carrier = @"";
  return self;
}
- (BOOL) hasMake {
  return result.hasMake;
}
- (NSString*) make {
  return result.make;
}
- (Device_Builder*) setMake:(NSString*) value {
  result.hasMake = YES;
  result.make = value;
  return self;
}
- (Device_Builder*) clearMake {
  result.hasMake = NO;
  result.make = @"";
  return self;
}
- (BOOL) hasModel {
  return result.hasModel;
}
- (NSString*) model {
  return result.model;
}
- (Device_Builder*) setModel:(NSString*) value {
  result.hasModel = YES;
  result.model = value;
  return self;
}
- (Device_Builder*) clearModel {
  result.hasModel = NO;
  result.model = @"";
  return self;
}
- (BOOL) hasRetina {
  return result.hasRetina;
}
- (BOOL) retina {
  return result.retina;
}
- (Device_Builder*) setRetina:(BOOL) value {
  result.hasRetina = YES;
  result.retina = value;
  return self;
}
- (Device_Builder*) clearRetina {
  result.hasRetina = NO;
  result.retina = NO;
  return self;
}
- (BOOL) hasDensity {
  return result.hasDensity;
}
- (int32_t) density {
  return result.density;
}
- (Device_Builder*) setDensity:(int32_t) value {
  result.hasDensity = YES;
  result.density = value;
  return self;
}
- (Device_Builder*) clearDensity {
  result.hasDensity = NO;
  result.density = 0;
  return self;
}
- (BOOL) hasW {
  return result.hasW;
}
- (int32_t) w {
  return result.w;
}
- (Device_Builder*) setW:(int32_t) value {
  result.hasW = YES;
  result.w = value;
  return self;
}
- (Device_Builder*) clearW {
  result.hasW = NO;
  result.w = 0;
  return self;
}
- (BOOL) hasH {
  return result.hasH;
}
- (int32_t) h {
  return result.h;
}
- (Device_Builder*) setH:(int32_t) value {
  result.hasH = YES;
  result.h = value;
  return self;
}
- (Device_Builder*) clearH {
  result.hasH = NO;
  result.h = 0;
  return self;
}
@end

@interface Campaign ()
@property (retain) NSString* campaignId;
@property (retain) NSString* creativeUrl;
@property (retain) NSString* trackingCode;
@end

@implementation Campaign

- (BOOL) hasCampaignId {
  return !!hasCampaignId_;
}
- (void) setHasCampaignId:(BOOL) value {
  hasCampaignId_ = !!value;
}
@synthesize campaignId;
- (BOOL) hasCreativeUrl {
  return !!hasCreativeUrl_;
}
- (void) setHasCreativeUrl:(BOOL) value {
  hasCreativeUrl_ = !!value;
}
@synthesize creativeUrl;
- (BOOL) hasTrackingCode {
  return !!hasTrackingCode_;
}
- (void) setHasTrackingCode:(BOOL) value {
  hasTrackingCode_ = !!value;
}
@synthesize trackingCode;
- (void) dealloc {
  self.campaignId = nil;
  self.creativeUrl = nil;
  self.trackingCode = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.campaignId = @"";
    self.creativeUrl = @"";
    self.trackingCode = @"";
  }
  return self;
}
static Campaign* defaultCampaignInstance = nil;
+ (void) initialize {
  if (self == [Campaign class]) {
    defaultCampaignInstance = [[Campaign alloc] init];
  }
}
+ (Campaign*) defaultInstance {
  return defaultCampaignInstance;
}
- (Campaign*) defaultInstance {
  return defaultCampaignInstance;
}
- (BOOL) isInitialized {
  if (!self.hasCampaignId) {
    return NO;
  }
  if (!self.hasCreativeUrl) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCampaignId) {
    [output writeString:1 value:self.campaignId];
  }
  if (self.hasCreativeUrl) {
    [output writeString:2 value:self.creativeUrl];
  }
  if (self.hasTrackingCode) {
    [output writeString:3 value:self.trackingCode];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCampaignId) {
    size += computeStringSize(1, self.campaignId);
  }
  if (self.hasCreativeUrl) {
    size += computeStringSize(2, self.creativeUrl);
  }
  if (self.hasTrackingCode) {
    size += computeStringSize(3, self.trackingCode);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Campaign*) parseFromData:(NSData*) data {
  return (Campaign*)[[[Campaign builder] mergeFromData:data] build];
}
+ (Campaign*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Campaign*)[[[Campaign builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Campaign*) parseFromInputStream:(NSInputStream*) input {
  return (Campaign*)[[[Campaign builder] mergeFromInputStream:input] build];
}
+ (Campaign*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Campaign*)[[[Campaign builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Campaign*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Campaign*)[[[Campaign builder] mergeFromCodedInputStream:input] build];
}
+ (Campaign*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Campaign*)[[[Campaign builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Campaign_Builder*) builder {
  return [[[Campaign_Builder alloc] init] autorelease];
}
+ (Campaign_Builder*) builderWithPrototype:(Campaign*) prototype {
  return [[Campaign builder] mergeFrom:prototype];
}
- (Campaign_Builder*) builder {
  return [Campaign builder];
}
@end

@interface Campaign_Builder()
@property (retain) Campaign* result;
@end

@implementation Campaign_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Campaign alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Campaign_Builder*) clear {
  self.result = [[[Campaign alloc] init] autorelease];
  return self;
}
- (Campaign_Builder*) clone {
  return [Campaign builderWithPrototype:result];
}
- (Campaign*) defaultInstance {
  return [Campaign defaultInstance];
}
- (Campaign*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Campaign*) buildPartial {
  Campaign* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Campaign_Builder*) mergeFrom:(Campaign*) other {
  if (other == [Campaign defaultInstance]) {
    return self;
  }
  if (other.hasCampaignId) {
    [self setCampaignId:other.campaignId];
  }
  if (other.hasCreativeUrl) {
    [self setCreativeUrl:other.creativeUrl];
  }
  if (other.hasTrackingCode) {
    [self setTrackingCode:other.trackingCode];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Campaign_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Campaign_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setCampaignId:[input readString]];
        break;
      }
      case 18: {
        [self setCreativeUrl:[input readString]];
        break;
      }
      case 26: {
        [self setTrackingCode:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCampaignId {
  return result.hasCampaignId;
}
- (NSString*) campaignId {
  return result.campaignId;
}
- (Campaign_Builder*) setCampaignId:(NSString*) value {
  result.hasCampaignId = YES;
  result.campaignId = value;
  return self;
}
- (Campaign_Builder*) clearCampaignId {
  result.hasCampaignId = NO;
  result.campaignId = @"";
  return self;
}
- (BOOL) hasCreativeUrl {
  return result.hasCreativeUrl;
}
- (NSString*) creativeUrl {
  return result.creativeUrl;
}
- (Campaign_Builder*) setCreativeUrl:(NSString*) value {
  result.hasCreativeUrl = YES;
  result.creativeUrl = value;
  return self;
}
- (Campaign_Builder*) clearCreativeUrl {
  result.hasCreativeUrl = NO;
  result.creativeUrl = @"";
  return self;
}
- (BOOL) hasTrackingCode {
  return result.hasTrackingCode;
}
- (NSString*) trackingCode {
  return result.trackingCode;
}
- (Campaign_Builder*) setTrackingCode:(NSString*) value {
  result.hasTrackingCode = YES;
  result.trackingCode = value;
  return self;
}
- (Campaign_Builder*) clearTrackingCode {
  result.hasTrackingCode = NO;
  result.trackingCode = @"";
  return self;
}
@end

@interface Network ()
@property (retain) NSString* username;
@property Network_SOCIAL network;
@end

@implementation Network

- (BOOL) hasUsername {
  return !!hasUsername_;
}
- (void) setHasUsername:(BOOL) value {
  hasUsername_ = !!value;
}
@synthesize username;
- (BOOL) hasNetwork {
  return !!hasNetwork_;
}
- (void) setHasNetwork:(BOOL) value {
  hasNetwork_ = !!value;
}
@synthesize network;
- (void) dealloc {
  self.username = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.username = @"";
    self.network = Network_SOCIALFb;
  }
  return self;
}
static Network* defaultNetworkInstance = nil;
+ (void) initialize {
  if (self == [Network class]) {
    defaultNetworkInstance = [[Network alloc] init];
  }
}
+ (Network*) defaultInstance {
  return defaultNetworkInstance;
}
- (Network*) defaultInstance {
  return defaultNetworkInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUsername) {
    return NO;
  }
  if (!self.hasNetwork) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUsername) {
    [output writeString:1 value:self.username];
  }
  if (self.hasNetwork) {
    [output writeEnum:2 value:self.network];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUsername) {
    size += computeStringSize(1, self.username);
  }
  if (self.hasNetwork) {
    size += computeEnumSize(2, self.network);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Network*) parseFromData:(NSData*) data {
  return (Network*)[[[Network builder] mergeFromData:data] build];
}
+ (Network*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Network*)[[[Network builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Network*) parseFromInputStream:(NSInputStream*) input {
  return (Network*)[[[Network builder] mergeFromInputStream:input] build];
}
+ (Network*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Network*)[[[Network builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Network*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Network*)[[[Network builder] mergeFromCodedInputStream:input] build];
}
+ (Network*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Network*)[[[Network builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Network_Builder*) builder {
  return [[[Network_Builder alloc] init] autorelease];
}
+ (Network_Builder*) builderWithPrototype:(Network*) prototype {
  return [[Network builder] mergeFrom:prototype];
}
- (Network_Builder*) builder {
  return [Network builder];
}
@end

BOOL Network_SOCIALIsValidValue(Network_SOCIAL value) {
  switch (value) {
    case Network_SOCIALFb:
    case Network_SOCIALTwitter:
    case Network_SOCIALLinkedin:
    case Network_SOCIALGoogle:
    case Network_SOCIALApp:
      return YES;
    default:
      return NO;
  }
}
@interface Network_Builder()
@property (retain) Network* result;
@end

@implementation Network_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Network alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Network_Builder*) clear {
  self.result = [[[Network alloc] init] autorelease];
  return self;
}
- (Network_Builder*) clone {
  return [Network builderWithPrototype:result];
}
- (Network*) defaultInstance {
  return [Network defaultInstance];
}
- (Network*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Network*) buildPartial {
  Network* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Network_Builder*) mergeFrom:(Network*) other {
  if (other == [Network defaultInstance]) {
    return self;
  }
  if (other.hasUsername) {
    [self setUsername:other.username];
  }
  if (other.hasNetwork) {
    [self setNetwork:other.network];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Network_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Network_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUsername:[input readString]];
        break;
      }
      case 16: {
        int32_t value = [input readEnum];
        if (Network_SOCIALIsValidValue(value)) {
          [self setNetwork:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasUsername {
  return result.hasUsername;
}
- (NSString*) username {
  return result.username;
}
- (Network_Builder*) setUsername:(NSString*) value {
  result.hasUsername = YES;
  result.username = value;
  return self;
}
- (Network_Builder*) clearUsername {
  result.hasUsername = NO;
  result.username = @"";
  return self;
}
- (BOOL) hasNetwork {
  return result.hasNetwork;
}
- (Network_SOCIAL) network {
  return result.network;
}
- (Network_Builder*) setNetwork:(Network_SOCIAL) value {
  result.hasNetwork = YES;
  result.network = value;
  return self;
}
- (Network_Builder*) clearNetwork {
  result.hasNetwork = NO;
  result.network = Network_SOCIALFb;
  return self;
}
@end

@interface Error ()
@property (retain) NSString* message;
@property int32_t code;
@end

@implementation Error

- (BOOL) hasMessage {
  return !!hasMessage_;
}
- (void) setHasMessage:(BOOL) value {
  hasMessage_ = !!value;
}
@synthesize message;
- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) value {
  hasCode_ = !!value;
}
@synthesize code;
- (void) dealloc {
  self.message = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.message = @"";
    self.code = 0;
  }
  return self;
}
static Error* defaultErrorInstance = nil;
+ (void) initialize {
  if (self == [Error class]) {
    defaultErrorInstance = [[Error alloc] init];
  }
}
+ (Error*) defaultInstance {
  return defaultErrorInstance;
}
- (Error*) defaultInstance {
  return defaultErrorInstance;
}
- (BOOL) isInitialized {
  if (!self.hasMessage) {
    return NO;
  }
  if (!self.hasCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMessage) {
    [output writeString:1 value:self.message];
  }
  if (self.hasCode) {
    [output writeInt32:2 value:self.code];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasMessage) {
    size += computeStringSize(1, self.message);
  }
  if (self.hasCode) {
    size += computeInt32Size(2, self.code);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Error*) parseFromData:(NSData*) data {
  return (Error*)[[[Error builder] mergeFromData:data] build];
}
+ (Error*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Error*)[[[Error builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Error*) parseFromInputStream:(NSInputStream*) input {
  return (Error*)[[[Error builder] mergeFromInputStream:input] build];
}
+ (Error*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Error*)[[[Error builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Error*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Error*)[[[Error builder] mergeFromCodedInputStream:input] build];
}
+ (Error*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Error*)[[[Error builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Error_Builder*) builder {
  return [[[Error_Builder alloc] init] autorelease];
}
+ (Error_Builder*) builderWithPrototype:(Error*) prototype {
  return [[Error builder] mergeFrom:prototype];
}
- (Error_Builder*) builder {
  return [Error builder];
}
@end

@interface Error_Builder()
@property (retain) Error* result;
@end

@implementation Error_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Error alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Error_Builder*) clear {
  self.result = [[[Error alloc] init] autorelease];
  return self;
}
- (Error_Builder*) clone {
  return [Error builderWithPrototype:result];
}
- (Error*) defaultInstance {
  return [Error defaultInstance];
}
- (Error*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Error*) buildPartial {
  Error* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Error_Builder*) mergeFrom:(Error*) other {
  if (other == [Error defaultInstance]) {
    return self;
  }
  if (other.hasMessage) {
    [self setMessage:other.message];
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Error_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Error_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setMessage:[input readString]];
        break;
      }
      case 16: {
        [self setCode:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasMessage {
  return result.hasMessage;
}
- (NSString*) message {
  return result.message;
}
- (Error_Builder*) setMessage:(NSString*) value {
  result.hasMessage = YES;
  result.message = value;
  return self;
}
- (Error_Builder*) clearMessage {
  result.hasMessage = NO;
  result.message = @"";
  return self;
}
- (BOOL) hasCode {
  return result.hasCode;
}
- (int32_t) code {
  return result.code;
}
- (Error_Builder*) setCode:(int32_t) value {
  result.hasCode = YES;
  result.code = value;
  return self;
}
- (Error_Builder*) clearCode {
  result.hasCode = NO;
  result.code = 0;
  return self;
}
@end

